<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/Universal%20Cup/The%203rd%20Universal%20Cup.%20Stage%209%20%20Xi&#39;an/</url>
    <content><![CDATA[<h3 id="A-An-Easy-Geometry-Problem"><a href="#A-An-Easy-Geometry-Problem" class="headerlink" title="A. An Easy Geometry Problem"></a>A. An Easy Geometry Problem</h3><p>把 $A_i$ 差分一下，每次询问就是问一个形如满足所有 $i\le r,b_{p-i}&#x3D;k-b_{p+i}$，线段树维护 hash 即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="F-An-Easy-Counting-Problem"><a href="#F-An-Easy-Counting-Problem" class="headerlink" title="F. An Easy Counting Problem"></a>F. An Easy Counting Problem</h3><p>因为 $p$ 是质数，所有根据 Lucas 定理，有 $\binom{n}{m}&#x3D;\binom{n \operatorname{mod} p}{m \operatorname{mod} p} \binom{\lfloor \frac{n}{p} \rfloor}{\lfloor \frac{m}{p} \rfloor}$，所以可以先把所有 $0\le a \le b &lt; p$ 的 $\binom{a}{b}$ 出现次数统计出来，设为 $cnt_i$，每次模拟一遍 Lucas 定理，即 $ans_i \cdot cnt_j \to ans’_{i\cdot j \operatorname{mod} p}$，做 $k$ 次，可以得到复杂度为 $\Theta(kp^2)$ 的做法。</p>
<p>注意到卷积形式，可以将下标取离散对数变成加法卷积。具体地，找到 $p$ 的一个原根 $g$，那么 $\forall 0\le i &lt; p,g^i$ 在模 $p$ 意义下互不相同，然后就可以 NTT 优化到 $\Theta(kp\log p)$。</p>
<h3 id="M-Random-Variables"><a href="#M-Random-Variables" class="headerlink" title="M. Random Variables"></a>M. Random Variables</h3><p>求值域为 $m$ 长度 $n$ 的序列期望众数出现次数。</p>
<p>考虑求众数出现次数 $\le k$ 的方案数，设 $f_{i,j}$ 为前 $i$ 个小球（位置）放到 $j$ 个盒子（值域）的方案数，转移有 $f_{i,j} &#x3D; f_{i-1,j} \times j - f_{i-k-1,j-1} \times j \times \binom{i-1}{k}$。注意到当 $k$ 确定时，$j$ 的范围不会小于 $j-\lfloor \dfrac{n}{k} \rfloor$，状态数是 $\Theta(\dfrac{n^2}{k})$ 的，那么总复杂度就是 $\Theta(n^2 \ln n)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/7.5%E8%AE%B2%E9%A2%98/</url>
    <content><![CDATA[<h3 id="【PR-5】双向奔赴"><a href="#【PR-5】双向奔赴" class="headerlink" title="【PR 5】双向奔赴"></a>【PR 5】双向奔赴</h3><p><a href="https://pjudge.ac/problem/21655">题目链接</a></p>
<p>记录 $f_{S,i,j},g_S$ 分别表示当前即将或已经在强连通上的点为 $S$，走到 $i$，终点在 $j$（保证终点在环上）的答案，还要 $S$ 是强连通的答案。转移的话先枚举 $S$，然后枚举终点 $j$，枚举在环上的点 $s\in S$，和<strong>不在环上</strong>的 $i$ 且 $(s,i)$ 有边，$g_S \to f_{S,i,j}$。$f_{S,i,j} + a_{i,k} \to f_{S\cup i,k,j}(k\notin S,\exist (i,k))$。转移到 $g_S$：$f_{S,i,j} + a_{i,j} \to g_{S \cup i}$。复杂度 $\Theta(2^n n^3)$。</p>
<p>注意：从 $g$ 转移到 $f$ 时若起点 $s$ 和终点 $j$ 重合，那么要转移到 $f_{S\cup i,i,j}$，防止走回头路。</p>
<h3 id="AGC043D"><a href="#AGC043D" class="headerlink" title="AGC043D"></a>AGC043D</h3><p><a href="https://atcoder.jp/contests/agc043/tasks/agc043_d">题目链接</a></p>
<p>无序归并的性质（对于任意长度）：将每个序列划分为若干前缀最大值，把相邻两个不同前缀最大值中的所有数和小的那个前缀最大值看成一块，那么把这些有序块归并就说最后的结果。</p>
<p>长度为 $3$ 的序列归并，一个序列为合法归并结果的充要条件</p>
<ul>
<li>元素个数为 $2$ 的块个数必须小于等于元素个数为 $1$ 的块个数。</li>
<li>相邻两个前缀最大值下标相差不超过 $3$。</li>
</ul>
<p>于是设 $f_{i,j}$ 为放了前 $i$ 个数形成若干整块，且元素个数为 $1$ 的块减元素个数为 $2$ 的块大小为 $j(j\ge 0)$。转移是简单的，有 $2\binom{i+2}{2} f_{i,j} \to f_{i+3,j},(i+1)\cdot f_{i,j \to f_{i+2,j-1}},f_{i,j} \to f_{i+1,j+1}$。复杂度 $\Theta(n^2)$。</p>
<p>注意 $j$ 可能为负。</p>
<h3 id="「JOI-Open-2020」黑白点"><a href="#「JOI-Open-2020」黑白点" class="headerlink" title="「JOI Open 2020」黑白点"></a>「JOI Open 2020」黑白点</h3><p><a href="https://loj.ac/p/3362">题目链接</a></p>
<p>注意到答案的上界是对于每个匹配，都会有左右两边点数的 $\min$ 条线段与它相交，这是可以取到的，构造方法是选一个点为起点，每个点往后面第一个与它不同色的连边。那么就是要最大化每个匹配长度和，最后再除以 $2$，设长度为 $l$，贡献有 $l-1$ 个。最大不好求，考虑最小，把每个白点对称到另一侧，那就是让 $n-l-1$ 的和最大，也就是 $n(n-1)$ 减去最小的 $l$ 和。考虑一个点上重合的黑白点直接匹配最优，然后黑看成 $1$，白看成 $-1$，也就是要平均分配，可以往左右传值（$a_i \leftarrow a_i - x,a_{i+1} \leftarrow a_{i+1}+x$），让传值次数最小。经典的糖果传递。复杂度 $\Theta(n\log n)$，在于排序。</p>
<h3 id="APIO2022-游戏"><a href="#APIO2022-游戏" class="headerlink" title="[APIO2022] 游戏"></a>[APIO2022] 游戏</h3><p><a href="https://www.luogu.com.cn/problem/P8375">题目链接</a></p>
<p>考虑记录每个点能到的最前的点 $suf_i$，和能到每个点最后面的点 $pre_i$，当 $pre_i \ge suf_i$ 时有环。</p>
<ul>
<li>考虑 $\Theta((n+m)k)$ 暴力，每次连边直接暴力 bfs 更新每个点，连 $u \to v$ 时，会使 $pre_v \leftarrow \max(pre_v, pre_u),suf_u \leftarrow \min(suf_u, suf_v)$。</li>
<li>考虑什么时候更新时才会形成环，也就是当 $u$ 的 $[pre_u,suf_u]$ <strong>完全</strong>在 $[pre_v,suf_v]$ 的右侧才行，这启发我们并不需要记录具体的位置，只用搞清相对位置即可。由于是区间，考虑一个线段树的分治结构，把每段区间放到最浅的节点使得 $pre_i \le mid &lt; suf_i$，记录当前节点为 $cur_i$。连边 $u\to v$ 时，考虑分情况更新。<ul>
<li>若 $cur_u&#x3D;cur_v$，更新并不会使得它们的所在节点改变。</li>
<li>若 $\operatorname{lca}(cur_u,cur_v) \neq cur_u \land \operatorname{lca}(cur_u,cur_v) \neq cur_v$，即它们在不同在子树中时<ul>
<li>若 $cur_u$ 在 $cur_v$ 左边，无变化，退出。</li>
<li>若 $cur_u$ 在 $cur_v$ 右边，找到环。</li>
</ul>
</li>
<li>若 $cur_v$ 在 $cur_u$ 左子树中，$cur_u$ 会移动到 $lson_u$，继续更新。</li>
<li>若 $cur_v$ 在 $cur_u$ 右子树中，无变化，退出。</li>
<li>若 $cur_u$ 在 $cur_v$ 左子树中，无变化，退出。</li>
<li>若 $cur_u$ 在 $cur_v$ 右子树中，$cur_v$ 会移动到 $rson_v$，继续更新。</li>
</ul>
</li>
<li>每次加边 $(u,v)$ 时，若 $u$ 被更新了，就重新更新所有 $w \to u$ 的 $w$。若 $v$ 被更新就重新更新所有 $v \to w$ 的 $v$ 。由于每个点只会被更新 $\Theta(\log k)$ 次， 也会更新其他点 $\Theta(\log k)$ 次，所以总复杂度是 $\Theta((n + m)\log k)$。</li>
</ul>
<h3 id="【UNR-6】稳健型选手"><a href="#【UNR-6】稳健型选手" class="headerlink" title="【UNR #6】稳健型选手"></a>【UNR #6】稳健型选手</h3><p><a href="https://uoj.ac/problem/749">题目链接</a></p>
<p>考虑单次询问，可以贪心，由于前 $2$ 个最多选 $1$ 个，前 $4$ 个最多选 $2$ 个 $\cdots$ 所以可以直接用个堆维护，每次加入这个数，遇到 $2i$ 这个位置加完后取走最小的那个数，剩下的就是答案。同理，假设区间长度为偶数（奇数最后一个一定会取），那么从后往前取 $2i$ 个至少取 $i$ 个，所以从后往前加入堆，每次 $2i$ 的时候取最大那个就行。</p>
<p>考虑多次询问，可以考虑两个已经确定答案的区间如何合并，设 $S,T$ 分别为两边取的，$S’,T’$ 为没取的，那么合并之后一定会从 $S$ 中删掉 $k$ 个数，从 $T’$ 中取走 $k$ 个数，且删掉最大的小于加入最小的，可以二分处理。既然可以合并，不妨考虑分治，每次处理所有 $[L,R]$ 跨过 $mid$ 的询问。那么考虑从 $mid$ 出发，先预处理右边的前缀 $T’$ 和答案，用第一种贪心并且用主席树存下来，然后从 $mid$ 扫到 $l$，用第二种贪心。每次合并直接二分即可。</p>
<p>复杂度 $\Theta((n+q)\log^2 n)$。</p>
<h3 id="ZJOI2019-语言"><a href="#ZJOI2019-语言" class="headerlink" title="[ZJOI2019] 语言"></a>[ZJOI2019] 语言</h3><p><a href="https://www.luogu.com.cn/problem/P5327">题目链接</a></p>
<p>对于一个 $u$ 的所有合法 $v$ 的个数即为所有穿过 $u$ 的路径并形成的虚树大小。考虑确定 $k$ 个关键点 $p_1,p_2,\cdots p_k$ 如何求出虚树大小。先将它们按 dfn 排序，答案为 $\dfrac{1}{2} \sum\limits_{i&#x3D;1}^k dis(p_i, p_{i \operatorname{mod} k+1})$。于是考虑树上差分，每次遇到路径 $s$ 或 $t$ 时将 $(dfn_s,dfn_t)$ 位置激活，遇到 $lca(s,t)$ 后将 $(dfn_s,dfn_t)$ 删除，可以线段树合并或启发式合并维护。线段树记录前驱、后缀即可，距离可以 $\Theta(1)$ lca 算。</p>
<p>复杂度 $\Theta((n+m)\log n)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/ARC%20%E6%9D%82%E9%A2%98%E9%80%89%E5%81%9A/</url>
    <content><![CDATA[<h2 id="ARC059"><a href="#ARC059" class="headerlink" title="ARC059"></a><a href="https://atcoder.jp/contests/arc059">ARC059</a></h2><h3 id="F-Unhappy-Hacking"><a href="#F-Unhappy-Hacking" class="headerlink" title="F - Unhappy Hacking"></a>F - Unhappy Hacking</h3><p>一种另类 dp 做法。</p>
<p>考虑这个就是一个括号序列，没匹配的 <code>)</code> 为无效退格，<code>(</code> 为原串。于是每个匹配的 <code>(</code> 就有两种方案。于是就是求没匹配的 <code>(</code> 为 $|S|$ 个的 $2^{cnt_(}$ 之和。那直接暴力 dp 找到最后一个无效退格，转移有 $f_{i} &#x3D; f_{i-1} + \sum\limits_{2j \le i} f_{i-2j} H_{j-1}2^j$，然后剩下的相当于是要在若干个合法括号子串之间插入 $|S|$ 个 <code>(</code>，这个相当于路径计数问题，设长度为 $2m+|S|$，那就是从 $(0,0)$ 走到 $(m+|S|,m)$ 不经过直线 $y&#x3D;x+1$ 的方案数，显然为 $\binom{2m+|S|}{m} -\binom{2m+|S|}{m-1}$。于是后面可以 $\Theta(1)$ 做，前面可以 $\Theta(n^2)$ 或者 $\Theta(n\log^2n)$ 的半在线卷积做。</p>
<h2 id="ARC060"><a href="#ARC060" class="headerlink" title="ARC060"></a><a href="https://atcoder.jp/contests/arc060">ARC060</a></h2><h3 id="F-Best-Representation"><a href="#F-Best-Representation" class="headerlink" title="F - Best Representation"></a>F - Best Representation</h3><p>考虑答案肯定不超过 $2$。</p>
<p>对于任意字符串 $s$ 满足最小循环节 $&gt;1$，那么在它的除了相邻两个循环节中间的任意位置切开（划分）后，剩下的每一块都不存在循环节（前提是每一块长度大于最小循环节）。</p>
<blockquote>
<p>证明：假设存在循环节 $l_2$，原 $s$ 的最小循环节为 $l_1$，则因为切开后 $l_1$ 是剩下这个字符串 $t$ 的一个周期（$t&gt;l1$），那么根据弱周期理论，一定有 $\gcd(l_1,l_2) | l_1 \land \gcd(l_1,l_2)&lt;l_1$ 为的周期，显然矛盾。</p>
</blockquote>
<p>那么对每个前缀和后缀做 kmp 判断一些 $(n-border)|n$ 即可。</p>
<p>复杂度 $\Theta(n)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/codeforces%20%E6%9D%82%E9%A2%98%E9%80%89%E5%81%9A/</url>
    <content><![CDATA[<h2 id="Codeforces-Round-961-Div-2"><a href="#Codeforces-Round-961-Div-2" class="headerlink" title="Codeforces Round 961 (Div. 2)"></a><a href="https://codeforces.com/contest/1995">Codeforces Round 961 (Div. 2)</a></h2><h3 id="D-Cases-2300"><a href="#D-Cases-2300" class="headerlink" title="D. Cases [*2300]"></a>D. Cases [*2300]</h3><p>注意到判断一个字符集 $S$ 可以作为答案的标准是把所有原串中在 $S$ 中的位置标出来，如果相邻两个的距离小于等于 $k$ 且最后一个位置被标记那么 $S$ 就是合法的。那么只要满足任意连续 $k$ 个位置中至少有一个在 $S$ 中和最后一个位置在 $S$ 中即可，那么对每个长度为 $k$ 的连续段，用一个二进制数 $st$ 表示其中出现的字符集（可以前缀和求出），那么把 $f_{st}$ 加 $1$，设 $sum_i$ 为 $i$ 的 $f$ 子集和，那么 $S$ 合法的条件就是 $sum_{C_U{S}}&#x3D;0 \land a_n \in S$。高维前缀和即可，复杂度 $\Theta(c2^c+nc)$。</p>
<h3 id="E2-Let-Me-Teach-You-a-Lesson-Hard-Version-2900"><a href="#E2-Let-Me-Teach-You-a-Lesson-Hard-Version-2900" class="headerlink" title="E2. Let Me Teach You a Lesson (Hard Version) [*2900]"></a>E2. Let Me Teach You a Lesson (Hard Version) [*2900]</h3><p>考虑对于 $n$ 的奇偶性分别处理。</p>
<ul>
<li><p>当 $2|n$ 时，$(2i-1,2i)$ 和 $(2i-1+n,2i)$ 两个二元组为一对，它们的和相等，那么看交换前和交换和哪个差更小即可。复杂度 $\Theta(n)$。</p>
</li>
<li><p>当 $2\nmid n$ 时，把能交换的两个数写到相邻的位置，如 $n&#x3D;5$ 时，可以写成 $6(12)(78)(34)(9 \space 10)(56)1$，那么对于一个 $(2i-1,2i)$ 来说，它可以跟左边第二个数交换第一个数，也可以跟右边第一个数交换第二个数，写成状态 $f_{i,0&#x2F;1,0&#x2F;1}$ 表示是否与左边、右边交换的值，那么若 $f_i$ 的状态为 $f_{i,j,k}$，那么 $f_{i-1}$ 的状态必定得为 $f_{i-1,p,j}$, $f_{i+1}$ 的状态为 $f_{i+1,k,q}$。把所有这些 $4n$ 个状态排序，从小到大扫下界，那么就是要让上界最小，就是让 $f_i$ 的最大值最小。那么可以把 $f_i$ 写成一个矩阵，合并相邻两个时可以有 $c_{i,j} &#x3D; \min(a_{i,0}+b_{0,j},a_{i,1}+b_{1,j})$，把 $n$ 个合并后上界即为 $\min(tot_{0,0},tot_{1,1})$。移动下界时直接把对应的 $f_{i,j,k}$ 设为 $inf$ 即可，单点修改可以线段树维护。复杂度 $\Theta(n\log n)$。</p>
</li>
</ul>
<h2 id="Codeforces-Round-960-Div-2"><a href="#Codeforces-Round-960-Div-2" class="headerlink" title="Codeforces Round 960 (Div. 2)"></a><a href="https://codeforces.com/contest/1990">Codeforces Round 960 (Div. 2)</a></h2><h3 id="E2-Catch-the-Mole-Hard-Version-2600"><a href="#E2-Catch-the-Mole-Hard-Version-2600" class="headerlink" title="E2. Catch the Mole(Hard Version) [*2600]"></a>E2. Catch the Mole(Hard Version) [*2600]</h3><p>看到询问次数，考虑根号做法。</p>
<p>考虑若已经知道那个点在一条确定的链上，那么直接二分它<strong>二分前</strong>的位置，在二分的过程中，若询问失败点会往上跳一步，此时记录一个 $d$ 表示偏移值，问 $u$ 的时候就问 $u$ 的 $d$ 级祖先即可。这里用掉 $\log n$ 次询问。</p>
<p>然后如何确定点在哪条链上，简单的想法是找到一个子树，然后找到这个子树最大的深度，随便询问其他地方这么多次，那么那个点一定会跳到这个子树的根到树根这条链上了。那就可以设置阈值 $B$，处理出每个子树最大深度 $maxn_u$，每次找到一个 $maxn_u &#x3D; B$ 的 $u$ 询问，若 $u$ 子树里有的话就直接询问 $B$ 次，否则就把这个子树删掉（至少会删掉 $B$）个点，这样可以花费 $\dfrac{n}{B}+B$ 次找到了。</p>
<p>总共需要 $B + \dfrac{n}{B} + \log n$ 次询问，取 $B&#x3D;70$ 即可通过。</p>
<h3 id="F-Polygonal-Segments-2800"><a href="#F-Polygonal-Segments-2800" class="headerlink" title="F. Polygonal Segments [*2800]"></a>F. Polygonal Segments [*2800]</h3><p>一个区间合法当且仅当区间长度大于等于 $3$ 且区间最大值小于其他值的和，即两倍最大值小于和。</p>
<p>考虑询问 $[l,r]$，若 $[l,r]$ 合法立即返回，否则 $[l,r]$ 中必定存在最大值大于其他数的和，且这个最大值有且仅有一个，那么把这个最大值删了，一定能使区间和减半，再往下递归下去，最多递归 $\Theta(\log V)$ 层。复杂度 $\Theta(nq\log V \log n)$。</p>
<p>考虑优化，线段树维护每个区间的答案，合并两个区间 $[l,r] [l’,r’]$ 时，只用找到 $L \le r \land R &gt; r$ 的最大 $[L,R]$，考虑做上面一样的过程，从 $[l,r’]$ 开始考虑，设最大值位置是 $pos$。</p>
<ul>
<li><p>若 $pos - 1 \le r$，那么递归到的左边一定被线段树左区间覆盖，已经知道答案。</p>
</li>
<li><p>若 $pos + 1 \ge l’$，那么递归的右边一定被线段树右区间覆盖，已经知道答案。</p>
</li>
</ul>
<p>所以只用递归到一边即可，$\Theta(q\log n)$ 次合并，每次合并复杂度 $\Theta(\log V)$ 或 $\Theta(\log V \log n)$，在于求区间最大的方法。（$\Theta(1)$ 区间最大，单点修改可以分块+猫树做）。</p>
<p>复杂度 $\Theta(n\log^2n\log V)$。</p>
<h3 id="P9530-JOISC2022-鱼-2-CF1990F-另解-trick"><a href="#P9530-JOISC2022-鱼-2-CF1990F-另解-trick" class="headerlink" title="P9530 [JOISC2022] 鱼 2 &amp; CF1990F 另解 [trick]"></a>P9530 [JOISC2022] 鱼 2 &amp; CF1990F 另解 [trick]</h3><p>与 CF1990F 类似的 trick。</p>
<p>记录 $s[l,r]$ 为 $[l,r]$ 的 $a$ 的和。</p>
<p>考虑一个鱼变成个一个区间 $[l,r]$ 的和，那么它先往右边延伸，直到遇见一个 $r’$ 使得 $a_{r’+1} &gt; s[l,r]$，往左也是同理，然后还可能继续往右延伸。可以发现，每次碰到有一边不能延伸的情况，延伸完另一半又可以延伸后，至少会比原来的和多一倍，即至少会变成原来的两倍。那么这个延伸最多可以进行 $\Theta(\log V)$ 次。</p>
<p>考虑使用线段树维护这个东西，在线段树上维护 $L(pos,sum,cnt),R(pos,sum,cnt)$ 分别表示 $a_{pos-1} &gt; s[pos,r]$ 且 $sum &#x3D; s[pos,r]$ 使得 $[pos,r]$ 这段区间中能变成 $sum$ 的鱼个数，右边就是 $[l,pos]$。考虑每次合并，先枚举 $R_{ls}$，显然当 $R$ 中 $pos$ 减小时，它能延伸到肯定越远，具有单调性。所以做一个双指针 $pl,pr$，表示当前枚举到 $R$ 中 $pos$ 时能左边延伸到 $R$ 中 $pl$，右边能延伸到 $L_{rs}$ 中的 $pr$。枚举 $L_{rs}$ 同理，最后只保留分别能延伸到 $l$ 或 $r$ 的，合并相同区间 $cnt$ 即可。每次合并复杂度 $\Theta(\log V)$，一共会进行 $\Theta(n+q\log n)$ 次合并，所以总复杂度是 $\Theta((n+q\log n)\log V)$。</p>
<blockquote>
<p>CF1990F 也可以使用类似的解法，即一个合法区间 $[l,r]$，若 $a_{l-1} &lt; s[l,r]$ 肯定合法，否则 $a_{l-1} \ge s[l,r]$，那么对应到线段树上只需要维护所有 $a_{l-1} \ge s[l,mid]$ 的这些位置 $l$ 即可，合并也是类似的。</p>
</blockquote>
<h2 id="EPIC-Institute-of-Technology-Round-Summer-2024-Div-1-Div-2"><a href="#EPIC-Institute-of-Technology-Round-Summer-2024-Div-1-Div-2" class="headerlink" title="EPIC Institute of Technology Round Summer 2024 (Div. 1 + Div. 2)"></a><a href="https://codeforces.com/contest/1987">EPIC Institute of Technology Round Summer 2024 (Div. 1 + Div. 2)</a></h2><h3 id="F2-Interesting-Problem-Hard-Version"><a href="#F2-Interesting-Problem-Hard-Version" class="headerlink" title="F2. Interesting Problem (Hard Version)"></a>F2. Interesting Problem (Hard Version)</h3><p>首先贪心是错误的。然后观察到删除一个 $(i,j)$ 需要删掉所有 $[i+1,j-1]$，且 $n\le800$，不妨考虑区间 dp。</p>
<p>考虑已经删掉的位置对接下来删掉的位置有哪些影响，显然删除原序列的 $a_i$ 时只用关心原序列 $i$ 之前有多少个已经被删了。那么设状态 $f_{i,j}$ 为删除 $[i,j]$ 至少需要 $i$ 左边删除多少个。</p>
<p>考虑转移，先有 $a_i$ 能被删掉的条件是 $i\ge a_i \land i \equiv a_i \pmod{2}$ 和 $i$ 之前删了 $\dfrac{i-a_i}{2}$ 次，考虑枚举 $(i,k)$ 是一起删除的，那么有 $f_{i,j} &#x3D; \min\limits_{k&#x3D;i+1}^{j-1}(\max(f_{i,k},f_{k+1,j},\dfrac{i-a_i}{2}))$，当 $f_{i+1,j-1} \le \dfrac{i-a_i}{2}$ 有 $f_{i,j} &#x3D; \min(f_{i,j},\dfrac{i-a_i}{2})$。</p>
<p>考虑求答案，设 $g_i$ 为前 $i$ 个数的答案，那么 $g_i &#x3D; \max(g_{i-1},\max\limits_{j &lt; i - 1 \land 2 \mid (i - j) \land g_j \ge f_{j+1,i}} g_j + \dfrac{i-j}{2})$。</p>
<p>答案即为 $g_n$，复杂度 $\Theta(n^3)$。</p>
<h2 id="Educational-Codeforces-Round-167-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-167-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 167 (Rated for Div. 2)"></a><a href="https://codeforces.com/contest/1989">Educational Codeforces Round 167 (Rated for Div. 2)</a></h2><h3 id="E-Distance-to-Different"><a href="#E-Distance-to-Different" class="headerlink" title="E. Distance to Different"></a>E. Distance to Different</h3><p>考虑一个 $a$ 数组生成的 $b$ 是怎样的，一个长度为 $len$ 连续段可以生成 $1,2,\cdots,\lfloor \dfrac{len+1}{2} \rfloor,\lfloor \dfrac{len}{2} \rfloor,\cdots,1$，那么 $a$ 中一段连续段就唯一对应 $b$ 中一个长度为 $len$ 的波，<strong>特别地，当 $len&#x3D;2$ 且在数组中间时，是两个连续的 $1$，我们对其不作统计（因为可以看作两个连续的 $1$ 段）</strong>，要求是连续段大于等于 $k$ 个，那么直接 dp 就行，设 $f_{i,j}$ 为前 $i$ 个数有 $j$ 个连续段，前缀和优化转移即可。</p>
<p>复杂度 $\Theta(nk)$。</p>
<h2 id="Codeforces-Round-955-Div-2-with-prizes-from-NEAR"><a href="#Codeforces-Round-955-Div-2-with-prizes-from-NEAR" class="headerlink" title="Codeforces Round 955 (Div. 2, with prizes from NEAR!)"></a><a href="https://codeforces.com/contest/1982">Codeforces Round 955 (Div. 2, with prizes from NEAR!)</a></h2><h3 id="E-Number-of-k-good-subarrays"><a href="#E-Number-of-k-good-subarrays" class="headerlink" title="E. Number of k-good subarrays"></a>E. Number of k-good subarrays</h3><p>设 $n-1$ 最高位为 $p$。</p>
<p>考虑枚举 $l,r$ 的 lcp 长度 $i$，和 lcp 的 $1$ 个数 $j$，可以设 $f_{i,j}$ 为用 $i$ 到 $p$ 这些位不顶上界的 $1$ 个数为 $j$ 的数个数，直接 dp 就行。然后分成两类。</p>
<ul>
<li><p>不顶上界，那么后面还有 $i-1$ 个位置，下一个位置 $r$ 必定是 $1$，$l$ 必定是 $0$，那么当 $\max(j+i-1,j+1) \le k$ 时，有答案 $(2^{i-1} - 1) \times 2^{i-1} \times f_{i,j}$，减 $1$ 是因为要特判 $r$ 后面全是 $1$ 的情况，若可以就有 $f_{i,j} \times 2^{i-1}$ 的贡献。</p>
</li>
<li><p>顶上界，同样分成 $r$ 后面顶上界或不顶上界来看，然后直接做个记忆化搜索一下后面合法的 $r$ 个数即可，$l$ 个数依旧是 $2^{i-1}$。</p>
</li>
</ul>
<p>复杂度 $\Theta(k\log n)$。</p>
<h3 id="F-Sorting-Problem-Again"><a href="#F-Sorting-Problem-Again" class="headerlink" title="F. Sorting Problem Again"></a>F. Sorting Problem Again</h3><p>$l$ 的位置就是最大的 $i$ 使得 $(\forall 1 \le j &lt; i,a_j \le a_{j+1}) \land a_i \le \min\limits_{j&#x3D;i+1}^n a_j$，$r$ 就是最小的 $i$ 使得 $(\forall i \le j &lt; n,a_j \le a_{j+1}) \land a_i \ge \max\limits_{j&#x3D;1}^n a_j$。</p>
<p>前缀和后缀极长的不降段可以直接线段树维护，设它们的位置是 $L,R$，找到 $[L+1,n]$ 的最小值，然后在 $[1,i]$ 二分一下找到第一个小于等于最小值的即可，$R$ 同理。</p>
<p>显然支持单点修改。</p>
<p>复杂度 $\Theta(n\log n)$。</p>
<h2 id="EPIC-Institute-of-Technology-Round-August-2024-Div-1-Div-2"><a href="#EPIC-Institute-of-Technology-Round-August-2024-Div-1-Div-2" class="headerlink" title="EPIC Institute of Technology Round August 2024 (Div. 1 + Div. 2)"></a><a href="https://codeforces.com/contest/2002">EPIC Institute of Technology Round August 2024 (Div. 1 + Div. 2)</a></h2><h3 id="D2-DFS-Checker-Hard-Version"><a href="#D2-DFS-Checker-Hard-Version" class="headerlink" title="D2. DFS Checker (Hard Version)"></a>D2. DFS Checker (Hard Version)</h3><ul>
<li>方法一</li>
</ul>
<p>设 $pos_i$ 为 $p_i$ 的逆排列。</p>
<p>合法的充要条件：$\forall (u,v),u&#x3D;fa_v$ 有 $[pos_v + siz_v - 1] \subseteq [pos_u +siz_u -1]$。可以通过归纳证明。</p>
<p>对每个 $u$ 用 set 维护每个儿子的 $[pos_v, pos_v + siz_v - 1]$ 即可，记录不合法的 $u$ 个数。改变 $pos$ 的时候更新父亲的 set 和自己是否合法即可。复杂度 $\Theta((n+q)\log n)$。</p>
<ul>
<li>方法二</li>
</ul>
<p>合法的充要条件，$\forall i&lt;n,p_i \in subtree(fa_{p_{i+1}})$，因为若 $p_i,p_{i+1}$ 不是父子关系的话，一定是在一个子树 $u$ 的两个不同儿子子树里面，且 $p_{i+1}$ 一定是 $u$ 的一个儿子。</p>
<p>交换时维护每个 $(i,i+1)$ 是否合法即可，复杂度 $\Theta(n+q)$。</p>
<h3 id="E-Cosmic-Rays"><a href="#E-Cosmic-Rays" class="headerlink" title="E. Cosmic Rays"></a>E. Cosmic Rays</h3><p>考虑将所有 $b_i$ 相同的连续段缩起来，那么一开始每个段的存活时间 $f_i&#x3D;len_i$ 为 $i$ 段长度。但是随着一些长度比较小的段的消失，有些相同的连续段可以合并起来。具体地，若 $i,j$ 段颜色相同，那么当 $f_i,f_j$ 比 $i&lt;k&lt;j$ 的 $f_k$ 都要大的话，可以将 $f_i,f_j$ 变成 $f_i+f_j-t$，其中 $t$ 为合并所需要的时间，即 $\max(f_k)$。<strong>注意，这里的 $f_k$ 有可能是中间的段相互合并之后的</strong>。那么考虑用单调栈取维护这个东西，每次加入一个段时，直接将栈头所有 $f_k&lt;f_i$ 的弹出来，弹的过程中，如果遇到相同颜色的段，就令 $f_i &#x3D; \max(f_i,f_k+f_i-maxn)$，其中 $maxn$ 为之前弹的最大 $f$。</p>
<p>复杂度 $\Theta(n)$。</p>
<h3 id="F2-Court-Blue-Hard-Version"><a href="#F2-Court-Blue-Hard-Version" class="headerlink" title="F2. Court Blue (Hard Version)"></a>F2. Court Blue (Hard Version)</h3><ul>
<li>$n&#x3D;m$</li>
</ul>
<p>考虑先找到 $n$ 以内最大的质数 $p$，显然当 $n$ 较大时，$2p&gt;n$（因为质数密度不小）。此时可以将 $a,b$ 中一个数（假设是 $a &gt; b$）加到 $p$，然后把 $b$ 加到 $p-1$。但是此时可能并不是很优，因为这样就不能继续加 $a$ 了，考虑找到第二大的质数 $q$，令 $b&#x3D;q$，假设 $2q&gt;n$，那么 $a$ 可以取到 $[p,n]$。但是此时就不知道 $b$ 是否能继续加了，于是考虑一个暴力 dp，设 $dp_{i,j}$ 为是否可以达到 $a&#x3D;i,b&#x3D;j$ 的状态，那么有 $dp_{i,j} &#x3D; [\gcd(i,j)&#x3D;1] [dp_{i-1,j} &#x3D; 1 \lor dp_{i,j-1} &#x3D; 1]$，初始从 $dp_{p,q}&#x3D;1$ 开始（若 $2p&gt;n$ 或 $2q&gt;n$，就令 $p&#x3D;q&#x3D;1$）。令 $P(n)$ 为 $n$ 以内最大的相邻质数的距离，此时复杂度为 $\Theta(P(n)^2 \log n)$，其中 $P(n)$ 大概只有 $100$ 左右，可以通过 F1。</p>
<ul>
<li>$n\ge m$</li>
</ul>
<p>同样找到 $p$，再找到 $\min(m,p-1)$ 以内最大的质数 $q$，由于 $m&lt;n$，此时可能不满足 $\forall i \in [p,n],q \nmid i$。那么考虑直接暴力从 $q$ 逆序找到第一个 $q’$ 使得条件成立，考虑分析这个的复杂度，如只考虑 $q’$ 是质数的情况，由于 $[p,n]$ 中最多有 $\Theta(P(n)\log n)$ 种质因子，那么只需要往前找到这么多个质数即可，大概要移动 $\Theta(P(n)P(m) \log_m n)$ 步，实际不只考虑质数的话会更少，那么再做暴力 dp 复杂度为 $\Theta(P(n)^2 P(m) \log n)$。可以通过。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%A5%BD%E9%A2%98%E5%88%86%E4%BA%AB/%E5%A5%BD%E9%A2%98%E5%88%86%E4%BA%AB%20II/</url>
    <content><![CDATA[<h3 id="D-Xor-Cards"><a href="#D-Xor-Cards" class="headerlink" title="D. Xor Cards"></a>D. Xor Cards</h3><p><a href="https://atcoder.jp/contests/abc249/tasks/abc249_g">题目链接</a></p>
<p>考虑到限制的形式和答案的形式都是异或和，那么不妨把一个二元组 $(x,y)$ 压缩成一个 $64$ 位整数 $y \cdot 2^{31}+x$。那么就是给定一个序列 $a_i$，求选出 $a$ 的一个子序列使得其异或和的前 $31$ 位小于等于 $k$，且让后 $31$ 位最大。</p>
<p>选择若干个数异或和考虑线性基，那么可以把 $n$ 个数变为 $\log V$ 个数，且每个最高位唯一，设最高位为 $i$ 的数是 $c_i$。那么考虑最高位往低位贪心，记当前选的异或和为 $cur$，选到了第 $i$ 位，每次加入的时候要看加入它之后异或和的前 $31$ 位是否还能 $\le k$，这里还可以把所有 $c_j (j&lt;i)$ 加入一个新的线性基，然后看看 $cur$ 异或上这个新的线性基中若干数是否可以 $\le k$ 即可。<strong>注意若加入 $c_i$ 可能会使答案变小时还要看不选 $c_i$ 能否合法</strong>。</p>
<p>复杂度 $\Theta(n\log V+\log^3 V)$。</p>
<h3 id="J-Doctor’s-Brown-Hypothesis"><a href="#J-Doctor’s-Brown-Hypothesis" class="headerlink" title="J. Doctor’s Brown Hypothesis"></a>J. Doctor’s Brown Hypothesis</h3><p><a href="https://codeforces.com/problemset/problem/1835/D">题目链接</a></p>
<p>首先合法的 $(x,y)$ 肯定在一个 scc 中，那么对于每个 scc 分别考虑。</p>
<p>考虑 $x \to y$ 的路径，肯定是经过若干个环 $len_i$，再加上一个不重复经过点的长度。注意到 $k\ge n^3$，又是形如一个不定方程的形式，那么就可以考虑裴蜀定理，考虑到对于任意的 $a_1\le a_2 \le a_3 \cdots \le a_n$，设 $d&#x3D;\gcd(a)$，那么可以凑成若干 $d\cdot t(t\ge a_1 \cdot a_n)$。那么就先考虑 $d$ 怎么求，即 scc 中所有环的 $\gcd$。</p>
<blockquote>
<p>结论：对于有向图的一个 scc，令这个 scc 中所有环的边权和的 $\gcd&#x3D;d$，那么有对于任意正整数 $p$ 使得 $p|d$ 的充要条件是存在一组 ${dis_i}$ 使得对于每条边 $(u\to v,w)$ 有 $dis_u + w\equiv dis_v \pmod{p}$。证明略。</p>
</blockquote>
<p>那么要求出 $d$，就可以找出这个 scc 以任意一点 $rt$ 为根的外向生成树，对于树上边 $(u\to v,w)$，令 $dis_v &#x3D; dis_u + w$（$dis_{rt} &#x3D; 0$）。那么 $d &#x3D; \gcd({dis_v -dis_u-w})$。</p>
<p>再考虑 $x \to y$ 的一个任意长度的路径 $A$，那么有 $dis_x + A + (-dis_y) \equiv 0 \pmod{d}$，意思就是从 $rt \to x \to y \to rt$ 形成一个环。那么就有 $A \equiv dis_y -dis_x \equiv 0 \pmod{d}$。那么合法的 $(x,y)$ 就要有 $dis_y - dis_x \equiv dis_x - dis_y \equiv k \equiv 0 \pmod{d}$。此时要么 $k \equiv 0 \pmod{d}$，要么 $k \equiv \dfrac{d}{2} \pmod{d} \land 2 | d$，然后就有 $dis_x - dis_y \equiv k \pmod{d}$，开个桶维护即可。</p>
<p>复杂度 $\Theta(n)$。</p>
<h3 id="E-Tenzing-and-Random-Operations"><a href="#E-Tenzing-and-Random-Operations" class="headerlink" title="E. Tenzing and Random Operations"></a>E. Tenzing and Random Operations</h3><p><a href="http://codeforces.com/problemset/problem/1842/G">题目链接</a></p>
<p>神题了。</p>
<p>观察最后答案的形式，是形如 $\dfrac{\sum \prod\limits_{i&#x3D;1}^n (a_i + v\cdot pre_i)}{n^m}$，其中 $pre_i$ 是后缀加的位置 $\le i$ 的个数。</p>
<p>但是这个式子并没有什么化简的前途，$pre$ 的方案数和贡献都很难算，所以不能直接暴力背包之类的。</p>
<p>注意到，按乘法分配律拆开 $\prod (a_i + v \cdot pre_i)$ 后，$v$ 的幂次只有 $0$ 到 $n$（形如 $(a_i + v + v + v + \cdots)$，对应 $pre_i$ 个不同时间加的 $v$），所以我们或许并不用关注到所有 $m$ 个 $v$，<strong>而只用关心算到答案中的那些即可</strong>，再乘上选出这些的方案数即可。</p>
<p>设 $f_{i,j}$ 为前 $i$ 个数，选过 $j$ <strong>种</strong>不同时间加的 $v$，此时有转移</p>
<ul>
<li><p>$a_i \times f_{i,j} \to f_{i + 1,j} $，表示括号里选 $a_i$。</p>
</li>
<li><p>$v \times j \times f_{i,j} \to f_{i+1,j}$，表示选了一个之前选过的 $v$。</p>
</li>
<li><p>$v \times (m-j) \times i \times f_{i,j} \to f_{i+1,j+1}$，表示在剩下 $m-j$ 个 $v$ 中新选了一个不同的 $v$，钦定它在 $[1,i]$ 这个区间做了后缀加。</p>
</li>
</ul>
<p>答案即是 $\dfrac{\sum\limits_{i&#x3D;0}^{\min(n,m)} f_{n,i} \times n^i}{n^m}$。复杂度 $\Theta(n^2)$。</p>
<h3 id="H-Numbers-on-the-blackboard"><a href="#H-Numbers-on-the-blackboard" class="headerlink" title="H. Numbers on the blackboard"></a>H. Numbers on the blackboard</h3><p><a href="https://codeforces.com/problemset/problem/878/E">题目链接</a></p>
<p>考虑单次询问。</p>
<p>考虑全是正数，由于一个数 $a_i$ 最多只能往前合并 $i-1$ 次，而每个数贡献都是正的，所以从后往前合并即可。</p>
<p>考虑全是负数，肯定乘的次数越少越好，那就从前往后合并。</p>
<p>考虑序列中只有一个负数时，先忽略那个负数，还是和正数一样从后往前合并，直到碰到那个负数的时候，设当前后缀合并起来的和是 $sum$，这里还是可以继续合并，因为只会让 $sum \to 2sum$，贡献是正的。那么现在整个后缀就变成了一个 $t&#x3D;2sum+a_i$，再考虑要不要往前合并。同样的考虑，如果 $t$ 是负数，那么肯定乘的次数越少越好，就不去合并，否则 $t$ 是正数的话合并越多次越好，就继续往前合并。</p>
<p>多个负数也同理，从后往前维护当前合并的数 $t$，如果合并完 $a_i$ 后 $t&lt;0$，那么把这个 $t$ 留到最后从前往后再合并，否则就继续往前合并即可。复杂度 $\Theta(n)$。</p>
<p>考虑多次询问。</p>
<h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>直接模拟这个过程，扫描线扫 $l$，维护每个 $r$ 开始当前的 $t_r$，现在这个值是单调的，因为每个 $t_r$ 都大于等于 $0$，每次乘 $2$ 和加上一个数不影响原来那些数的大小关系，而当 $t_r$ 变成负数时就会变成 $0$，所以依然单增。可以直接线段树去维护这个东西。考虑一个 $t_r &gt; inf(inf \ge 10^9)$ 时，$t_r$ 不可能变成负数了，可以直接维护一个 $pos$ 表示 $&gt;pos$ 的 $r$ 都是可以一直合并的，这部分可以直接 $\times 2 + a_i$ 的时候取模。前面的部分要考虑一个前缀变的小于 $0$ 的时候，对应的 $ans_r \leftarrow ans_r + 2t_r$，这个暴力复杂度会炸，但是由于缩为 $0$ 后这个前缀以后的值都是一样的，所以可以直接并查集维护相等的块。然后 $\le pos$ 的这一部分因为会有负数每次不能取模，所以略显麻烦。复杂度 $\Theta(n\log n)$。</p>
<h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>可以从前往后去做这个东西，每次加入一个数后模拟上述的过程，一直往前合并直到值 $&lt;0$ 就停止，用一个栈加上并查集维护没一块的和，再维护块的一个前缀和。查询 $l$ 的时候 $l$ 可能是在一个块的中间，解决的办法是因为同一块内形如 $a_l + 2a_{l+1}+4_a{l+2}\cdots$，所以可以直接维护一个后缀和 $suf_i &#x3D; 2suf_{i+1}+a_i$，用类似 hash 的办法即可。复杂度 $\Theta(n)$，也要注意 $inf$ 的问题。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%E3%80%90%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95%E3%80%91ds%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>已结坑！大概是 codeforces 上 2600~2900 的带有 data structures 标签的一些题。</p>
<h1 id="树上问题"><a href="#树上问题" class="headerlink" title="树上问题"></a>树上问题</h1><h3 id="CF418D"><a href="#CF418D" class="headerlink" title="CF418D"></a>CF418D</h3><p><a href="https://www.luogu.com.cn/problem/CF418D">题目链接</a></p>
<p>首先可以倍增找到 $(u,v)$ 中间的断点 $t$（ $t$ 和左边都去 $u$，右边都去 $v$）。然后就可以把树分成两部分（这里注意如果 $t&#x3D;lca(u,v)$ 不能直接取子树），然后就是求 $\max(dis(u,S1),dis(v,S2))$。问题就是点到一个联通块的距离，且这个联通块是一个完整子树或树减去子树，在 dfn 序上至多分成两个区间。这个问题就随便做了，可以离线下来树上扫描线，也可以直接在 dfn 序上合并直径（最大距离一定是到直径两端点之一），或者树剖维护都可以。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF741D"><a href="#CF741D" class="headerlink" title="CF741D"></a>CF741D</h3><p><a href="https://www.luogu.com.cn/problem/CF741D">题目链接</a></p>
<p>其实就是求经过每个节点 $u$ 且两端在 $u$ 子树中的最长合法路径。一个路径合法当且仅当不超过一个字符出现奇数次，考虑将出现次数的奇偶性状压，那么就是找 $u$ 中两个不同子树的点对，满足它们到根的路径状态异或和的大小不超过 $1$，记录一下每个点的深度和状态，枚举奇数的位置就行，dsu on tree 处理，开个桶记录 $2^{22}$ 个状态就行。复杂度 $\Theta(nc\log n)$​。</p>
<h3 id="CF763D"><a href="#CF763D" class="headerlink" title="CF763D"></a>CF763D</h3><p><a href="https://www.luogu.com.cn/problem/CF763D">题目链接</a></p>
<p>不同构肯定树 hash，考虑树上扫描线，维护所有子树的 hash 值的桶。每次根从 $u$ 转移到 $v$ 时，会删掉以 $u$ 为根的整棵树，加入以 $v$ 为根的整棵树，加入以 $u$ 为根除了 $v$ 子树以外的树。map 记录出现次数就行，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF776F"><a href="#CF776F" class="headerlink" title="CF776F"></a>CF776F</h3><p><a href="https://www.luogu.com.cn/problem/CF776F">题目链接</a></p>
<p>考虑这些区域会形成一棵树，可以暴力处理一下编号。然后就是在一棵树上染色，考虑从小往大染色。颜色是 $1$ 的显然只有一个点 $u$，那么颜色是 $2$ 的点在 $u$ 的所有子树中都不能超过一个，颜色为 $3$ 的点可以在颜色 $2$ 到 $u$ 的路径上，也可以在颜色 $2$ 的子树中。发现这个东西很像点分治的形式，于是模仿点分治，将每层都染成同一个颜色，个数不超过 $\Theta(\log n)$。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF925E"><a href="#CF925E" class="headerlink" title="CF925E"></a>CF925E</h3><p><a href="https://www.luogu.com.cn/problem/CF925E">题目链接</a></p>
<p>假设树上每个点的权值是 $a_i$，初始 $a_i &#x3D; t_i$。那么变成黑点相当于链减 $1$，变白点相当于链加 $1$。现在就是要支持：区间加减 $1$，单点标记，询问全局没标记的点小于 $0$ 的个数。这个可以分块 $\Theta(n\sqrt{n} \log n)$ 做，空间 $\Theta(n\sqrt{n})$ 类似 <a href="https://uoj.ac/problem/435">这题</a>。但是考虑 $\Theta(n\sqrt{n})$ 的做法，空间线性。直接对询问分块，考虑将每 $B$ 个询问一起做，那么记录每个点在前面处理完之后的权值 $a_i$，然后考虑这 $\Theta(B)$ 个点的贡献。将这 $\Theta(B)$ 个点建虚树，每条边加的值都相等，那么将每个点都挂到它所在的虚边的深度大的那个点上然后排序，然后每次链加可以暴力跳祖先 $\Theta(B)$ 个点，然后再对每条虚边记录指针 $pos_i$ 为当前第一个 $&lt;0$ 的位置，每次加会使指针移动 $\Theta(1)$ 个位置（因为只会 +1 或 -1）。排序部分可以把 $n$ 个点放到一起基数排序，然后复杂度就是 $\Theta(n\sqrt{n})$ 了。</p>
<h3 id="CF833D"><a href="#CF833D" class="headerlink" title="CF833D"></a>CF833D</h3><p><a href="https://www.luogu.com.cn/problem/CF833D">题目链接</a></p>
<p>路径数数考虑点分治，那么就是要考虑一堆三元组 $(val,x,y)$ 表示路径的权值积，黑色点 $x$ 个，白色点 $y$ 个。那么就是要找一堆三元组对，$(val1,x,y),(val2,a,b)$ 满足 $\dfrac{1}{2} \le \dfrac{a+x}{b+y} \le 2$，化简一下就是<br>$$<br>\left{<br>             \begin{array}{<strong>lr</strong>}<br>             2a-b\ge y-2x<br>             \<br>             2b-a\ge x-2y<br>             \end{array}<br>\right.<br>$$<br>设 $x_i &#x3D; 2a-b,y_i &#x3D; 2b-a$ 为询问点，$x_i &#x3D; b-2a,y_i &#x3D; a-2b$ 为插入点，那么就是要对每个询问点找到所有 $x_j \le x_i,y_j \le y_i$ 的乘积，可以简单二维数点。那复杂度就是 $\Theta(n\log^2 n)$，但是直接搞会算两次，就成平方了，然后可以写个 cdq 三只 $\log n$，还是能过。</p>
<h3 id="CF986E"><a href="#CF986E" class="headerlink" title="CF986E"></a>CF986E</h3><p><a href="https://www.luogu.com.cn/problem/CF986E">题目链接</a></p>
<p>把每个数的所有质因子找出来，然后对每种质因子用动态开点线段树维护，然后询问枚举 $w$ 的因子搞，暴力这样做是 $\Theta(n\log^2 n \log V)$ 的，无法通过。发现不用树剖，其实就是要求 $\Theta(n\log V)$ 次一个点到根上含有 $p$ 质因子的有多少个。考虑离线，考虑对每个质因子单独处理，把 $w$ 的所有质因子 $p$ 处挂 $u,v,lca(u,v),fa(lca(u,v))$ 四个询问，然后把所有含有 $w$ 质因子的点拿出来，子树加，单点查即可。复杂度  $\Theta(n\log n \log V)$。 </p>
<h3 id="CF983E"><a href="#CF983E" class="headerlink" title="CF983E"></a>CF983E</h3><p><a href="https://www.luogu.com.cn/problem/CF983E">题目链接</a></p>
<p>先考虑每个询问暴力做，发现把 $(u,v)$ 的路径拿出来，一定是先坐一个能走最长的车，再换乘，直到走到 $v$。如果 $v$ 是 $u$ 的祖先肯定很好做，就是从每个点往上一直走，首先预处理从每个点往上坐 $1$ 条线走到最远哪里，这个可以把每个路径的 $u,v$ 处插入一个插入标记，在 $lca(u,v)$ 插入一个删除标记，然后直接线段树合并就能做到单 $\log$。然后就是倍增处理走 $2^i$ 步最浅到哪，两边同时跳到 $lca$ 下面的点，然后看看是否有路径在 $(u’,v’)$ 子树中，就是个二维数点，主席树线段树合并随便做就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1039D"><a href="#CF1039D" class="headerlink" title="CF1039D"></a>CF1039D</h3><p><a href="https://www.luogu.com.cn/problem/CF1039D">题目链接</a></p>
<p>注意到路径不能重复，所以考虑根号分治。当 $k \le B$ 时，考虑单次暴力，设二元组 $f_u$ 为 $u$ 的子树中能选出多少条长度 $k$ 路径，且满足第一关键字的情况下能有最多多少从根往下的空白。显然 $\Theta(n)$ 做即可，复杂度 $\Theta(nB)$。当 $k &gt; B$ 时，此时答案不超过 $\dfrac{n}{B}$，且答案有单调性，所以考虑对于每个答案，二分它的边界，用上面的方法暴力验证，复杂度 $\Theta(\dfrac{n^2 \log n}{B})$。当 $B$ 取 $\sqrt{n\log n}$ 时，有最优复杂度 $\Theta(n \sqrt{n\log n})$。</p>
<h3 id="CF1083C"><a href="#CF1083C" class="headerlink" title="CF1083C"></a>CF1083C</h3><p><a href="https://www.luogu.com.cn/problem/CF1083C">题目链接</a></p>
<p>考虑从 $mex$ 入手，怎么判断权值为 $[0,i]$ 的区间是否组成一个链。判断若干个点是否组成一条链当然可以使用线段树来合并，把左右儿子组成的链的 $4$ 个点拿出来，枚举这个新链的两个端点，判断其他两个点是否在这条链上（就是 $dis(x,u)+dis(x,v)&#x3D;dis(u,v)$）就行，然后再套个线段树二分，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1088F"><a href="#CF1088F" class="headerlink" title="CF1088F"></a>CF1088F</h3><p><a href="https://www.luogu.com.cn/problem/CF1088F">题目链接</a></p>
<p>首先感觉一下，发现重构出来的树以最小权值作为根时，也应该是父亲权值小于儿子的。因为如果父亲权值大于儿子，那么我可以找到深度最大的这样的点，删掉这个点和它父亲的连边，把它接到原本树上的父亲上（由于这个深度是最大的，所以子树肯定没有它原本树上的父亲），通过这样的调整一定更优，于是就可以调整成一个父亲权值小于儿子的了。那么就是考虑连到比它小的点，如果连到一个不是祖先的点，那么找到这个点和它的 $lca$，这个 $lca$ 的权值比它们都小，而且距离更近，所以肯定更优。那么就是在原树上找到一个祖先连边了，直接枚举 $\lceil \log_2 dis(u,v)\rceil$，把 $u$ 到根的链分成 $\Theta(\log n)$ 段，然后在每个段上找到一个最小值连就行，其实就是这个段最顶上那个点，就是 $u$ 的 $2^k$ 祖先（注意一下边界），权值是 $a_u + \min a_v (1+k)$。倍增处理即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="P2056"><a href="#P2056" class="headerlink" title="P2056"></a>P2056</h3><p><a href="https://www.luogu.com.cn/problem/P2056">题目链接</a></p>
<p>每个点点权 $\in \set{0,1}$，每次翻转单点，求两个 $0$ 的距离最大。</p>
<ul>
<li>最大距离考虑直径，线段树维护每个区间的直径，由于边权非负，可以贪心合并。（大区间的直径端点一定在左右儿子的 $4$ 个端点中取）复杂度 $\Theta(n\log n)$，<strong>不支持负边权</strong>。</li>
<li>动态查询路径考虑动态点分治，用堆维护每个点 $u$ 子树（点分树）中到父亲（点分树）的所有距离 $q_u$，用堆 $son_u$ 维护 $u$ 到所有儿子（点分树）的距离（这是将每个 $q_v$ 中最大的放进来，<strong>每个子树只放一个</strong>），再用一个全局的堆 $st$ 维护所有 $son_u$ 最大和次大的和。注意堆要支持删除，就对每个堆再开一个删除的堆（把删除的东西放入），取出时若两个堆顶相同就同时弹出。修改先删 $q$，然后更新 $son_{fa}$，然后再更新 $st$。复杂度 $\Theta(n\log ^ 2 n)$​，<strong>支持负边权</strong>。</li>
<li>最大距离考虑括号序列，dfs 进入一个点塞 $($，然后塞点编号，然后出来的时候塞 $)$。显然两点距离就是删除匹配的后 $)))((($ 的长度。考虑线段树维护每个点的 $r_u,l_u$ 表示删除匹配后这段区间的右括号、左括号个数，和最长长度 $dis$。转移如下<ul>
<li>$r_u &#x3D; r_{ls} + \max(0,r_{rs} - l_{ls}),l_u &#x3D; l_{rs} + \max(0,l_{ls} - r_{rs})$。</li>
<li>$dis_u &#x3D; \max(dis_{ls},dis_{rs},\max\limits_{i\le mid &lt;j} r_{[i,mid]} + |l_{[i,mid]}-r_{[mid+1,j]}|+l_{[mid+1,j]}) $<ul>
<li>$\max\limits_{i\le mid &lt;j} r_{[i,mid]} + |l_{[i,mid]}-r_{[mid+1,j]}|+l_{[mid+1,j]} &#x3D;\max((l_{[i,mid]}+r_{[i,mid]})+(l_{[mid+1,j]} - r_{[mid+1,j]}),(l_{[mid+1,j]}+r_{[mid+1,j]})-(l_{[i,mid]} - r_{[i,mid]}))$</li>
</ul>
</li>
<li>$addp_u &#x3D; \max l_{[l,i]}+r_{[l,i]}&#x3D;\max(addp_{ls},\max(r_{ls}+l_{ls}+subp_{rs},r_{ls}-l_{ls}+addp_{rs}))$</li>
<li>$adds_u &#x3D; \max l_{[i,r]}+r_{[i,r]} &#x3D; \max(adds_{rs},\max(l_{rs}+r_{rs}-subp_{ls},l_{rs} - r_{rs}+adds_{ls}))$</li>
<li>$subp_u &#x3D; \max l_{[l,i]} - r_{[l,i]} &#x3D; \max(subp_{ls},l_{ls} -r_{ls}+subp_{rs})$</li>
<li>$subs_u &#x3D; \max l_{[i,r]} - r_{[i,r]} &#x3D; \max(subs_{rs},l_{rs} - r_{rs}+subs_{ls})$​</li>
<li>复杂度 $\Theta(n\log n)$，<strong>不支持负边权</strong></li>
</ul>
</li>
</ul>
<h3 id="CF1413F"><a href="#CF1413F" class="headerlink" title="CF1413F"></a>CF1413F</h3><p><a href="https://www.luogu.com.cn/problem/CF1413F">题目链接</a></p>
<p>记录 $sum_i$ 为 $i$ 到根的边权异或和，那么就是要找到两个点使得它们 $sum_u &#x3D; sum_v$ 且 $dis(u,v)$ 最大，且支持区间翻转。考虑用 P2056 直径的思路记录线段树每个节点 $sum&#x3D;0&#x2F;1$ 的直径，翻转的时候交换一下 $tr_{u,0},tr_{u,1}$ 即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1479D"><a href="#CF1479D" class="headerlink" title="CF1479D"></a>CF1479D</h3><p><a href="https://www.luogu.com.cn/problem/CF1479D">题目链接</a></p>
<p>路径数颜色，考虑主席树记录每个点到根的每个颜色出现次数模 $2$。如果出现了偶数次就是根到 $u$ 和根到 $v$ 的次数模 $2$ 异或起来是 $0$。可以考虑在主席树上二分找这个 $x$，那么就是要快速判断一段区间的颜色是否按位异或起来都是 $0$。用个异或哈希刻画这个东西就行了。复杂度 $\Theta(n \log n)$。</p>
<h3 id="BZOJ3252"><a href="#BZOJ3252" class="headerlink" title="BZOJ3252"></a>BZOJ3252</h3><p><a href="https://vjudge.net.cn/problem/%E9%BB%91%E6%9A%97%E7%88%86%E7%82%B8-3252">题目链接</a></p>
<p>先考虑一个一个取是不是对的。显然是对的，因为如果一条路径在前两次没被选而被第一次选了，那么第一次肯定可以拿第二次的更优，矛盾了。那么再考虑贡献不能重复算怎么办，设 $maxn_u$ 为从 $u$ 到 $u$ 子树的一个叶子最长的一条路径（也就是长链），那么当 $u$ 子树里有被选的点时，$maxn_u$ 一定被选了，而且是第一次选 $u$ 子树内的点时就被选了，所以其他点不可能有 $u \to maxn_u$ 这条链上的贡献了。那么一个叶子的贡献就是它到它所在长链链顶的权值和，选出前 $k$ 大的即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF526G"><a href="#CF526G" class="headerlink" title="CF526G"></a>CF526G</h3><p><a href="https://www.luogu.com.cn/problem/CF526G">题目链接</a></p>
<p>这题是真牛。</p>
<p>考虑单次询问，那么把 $x$ 设为根，显然这 $y$ 条路径都是 $y$ 对叶子节点构成的，那么再考虑任意 $2k$ 个叶子是否存在一个构造使得能覆盖它们的虚树呢？答案是肯定的。把它们按照 dfn 序排序，每次把首尾配对即可。那么不考虑包含 $x$，就是要求选 $2k$ 个叶子使得它们构成的虚树权值和最大，这里可以运用 BZOJ3252 的长链剖分的做法 $\Theta(n)$ 做，然后如果不包含 $x$，即它们都在 $x$ 的同一棵子树里，那么删掉贡献最小的那个点，加上 $x$ 其他子树到它距离最大的那个就好了 。这样单次询问就可以在 $\Theta(n)$ 的复杂度内搞定。</p>
<p>考虑多次询问，每次询问的瓶颈在于每次都要长剖一次，很劣。我们发现每次距离 $x$ 最远的那个点，也就是直径的端点，一定会被选。所以，不妨把直径的两个端点分别作为根求答案取最大值。再额外选 $2y-1$ 个叶子，可以预处理出来选前 $i$ 个叶子的答案，与 BZOJ3252 一模一样。然后不包含 $x$ 的话证明 $x$ 所在长链一定不是前 $2y-1$ 个，所以可以删掉第 $2y-1$ 个换成 $x$ 的长链能让损失最小。但是考虑 $x$ 往上第一个遇到的长链，若把它去掉，$x$ 的长链还会额外贡献那条长链在 $x$ 到根这部分的长度，可能更优。所以再判断删除第 $2y-1$ 条链和 $x$ 往上第一条长链哪个更优就行。后者可以倍增找到，记录每个点被覆盖长链的排名就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1633F"><a href="#CF1633F" class="headerlink" title="CF1633F"></a>CF1633F</h3><p><a href="https://www.luogu.com.cn/problem/CF1633F">题目链接</a></p>
<p>考虑有完美匹配的充要条件，就是 $\sum\limits_u [2 | siz_u] &#x3D; \sum\limits_u [2 \nmid siz_u]$，且只会选择每个 $2\nmid siz_u$ 的 $(u,fa_u)$ 这些边。每次加入一个相当于把它到 $1$ 的路径上全部翻转奇偶性，用线段树维护每个区间的奇数、偶数 $siz_u$ 个数和每个奇数的 $siz_u$ 的 $id(u,fa_u)$ 之和，每次翻转直接交换奇偶即可，树剖维护一下，复杂度 $\Theta(n\log^2 n)$。</p>
<h3 id="CF1654G"><a href="#CF1654G" class="headerlink" title="CF1654G"></a>CF1654G</h3><p><a href="https://www.luogu.com.cn/problem/CF1654G">题目链接</a></p>
<p>贪心地走，一定是走到一个点 $v$ 使得 $v$ 有相邻同高度的点，然后反复跳再下去，就是 $2h_u - h_v$。那么要最小化 $h_v$。考虑这样的 $v$ 的种类数量，因为每当出现一个两个高度为 $t$ 的相邻的点，就一定底下会多出来 $2t$ 个点，注意到是树形结构，所以 $\sum h_v &#x3D; \Theta(n)$ 的。那么 $h_v$ 就有 $\Theta(\sqrt{n})$ 种，设 $f_{i,j}$ 是从 $i$ 开始走到一个高度为 $j$ 的 $v$ 所需要初始最小动能。先从低往高转移，然后每个相同高度的联通块换根转移。复杂度 $\Theta(n\sqrt{n})$。</p>
<h3 id="CF1749F"><a href="#CF1749F" class="headerlink" title="CF1749F"></a>CF1749F</h3><p><a href="https://www.luogu.com.cn/problem/CF1749F">题目链接</a></p>
<p>考虑到 $d$ 很小，不妨将所有更改挂到对应节点上，然后枚举查询节点的不高于 $d$ 级祖先。</p>
<p>更改时，先考虑 $lca(u,v)$ 子树内的贡献。可以开 $20$ 棵线段树维护每个距离的标记。对于链 $(u,v)$，可以在这条路径上每个点在 $[1,d]$ 这些线段树上加上 $k$，但是这样会算重，具体地，对于一个点 $x$，若它还有儿子 $y$ 被更改，那么 $y$ 子树中距离 $y$ 不超过 $d-1$ 的点会被多加 $k$。所以对于链 $(u,v)$ 上除了 $lca(u,v)$ 的点之外所有点都在 $[1,d-1]$ 这些线段树上减 $k$。查询的时候枚举 $u$ 的 $20$ 个祖先然后单点查询。这样复杂度是 $\Theta(nd\log^2 n+nd\log n)$，不平衡。注意到只是单点查，那么树上差分一下变成子树查询即可，复杂度 $\Theta(nd \log n)$。然后是 $lca(u,v)$ 子树以外的贡献，那么考虑直接枚举 $lca(u,v)$ 的不超过 $d$ 级祖先，在每个这样的点 $x$ 开 $20$ 个标记，表示 $x$ 子树到 $x$ 距离等于 $i$ 的标记。类似地，每次把 $tag_{x,0}$ 到 $tag_{x,d-dis(u,lca(u,v))}$ 加上 $k$，设 $x$ 在 $lca(u,v)$ 方向儿子为 $y$，把 $tag_{y,0}$ 到 $tag_{y,d-dis(u,lca(u,v))}$ 全部减去 $k$ 即可。复杂度 $\Theta(nd^2)$（当然可以做到 $\Theta(nd\log d)$）。</p>
<p>查询直接枚举 $u$ 的 $20$ 个祖先，然后子树求和就行，再加上标记，复杂度 $\Theta(n(d\log n+d))$。</p>
<p>所以总复杂度为 $\Theta(nd(\log n + d))$。</p>
<h3 id="CF1810F"><a href="#CF1810F" class="headerlink" title="CF1810F"></a>CF1810F</h3><p><a href="https://www.luogu.com.cn/problem/CF1810F">题目链接</a></p>
<p>注意到答案应该不会超过 $\max a_i +\log_m{n}$，因为可以构造一个完全 $m$ 叉树。于是考虑枚举答案，然后来验证。设当前答案为 $ans$，显然先搞出来个深度为 $ans$ 的满 $m$ 叉树比较优，然后从后往前枚举值域 $i$，设当前空位为 $x$，每次使得 $x \leftarrow m(x - cnt_i),i\leftarrow i - 1$。若 $x$ 始终 $\ge 0$，那么就可行。考虑线段树维护这个东西，设每个区间要合法初始值最小为 $f_u$，使用最小初始值最后剩下 $g_u$，从 $l$ 到第一个有数值的位置设为 $tr_u$。合并的时候若 $m^{len_{ls} - tr_{ls}}g_{rs} \ge f_{ls}$，那么 $f_u &#x3D; f_{rs},g_u &#x3D; g_{ls}+m^{len_{ls}}(g_{rs} - f_{ls})$。否则设 $t&#x3D;\lceil \dfrac{f_{ls}-m^{len_{ls} - tr_{ls}}g_{rs}}{m^{len_{ls} - tr_{ls}+tr_{rs}}} \rceil$，那么 $f_u &#x3D; t+f_{rs},g_u &#x3D; g_{ls} + m^{tr_{ls}}(g_{rs}+t\cdot m^{len_{ls} - tr_{ls}+tr_{rs}}- f_{ls})$。每次单点改即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1827D"><a href="#CF1827D" class="headerlink" title="CF1827D"></a>CF1827D</h3><p><a href="https://www.luogu.com.cn/problem/CF1827D">题目链接</a></p>
<p>注意到有两个重心当且仅当存在一条边使得两个端点的子树 $siz$ 相等且等于 $\dfrac{n}{2}$。如果直接维护就是要维护 $\min |n-2siz_i|$，还要区间加 $1$ 减 $1$，比较麻烦。考虑这个点会在哪，感受一下发现肯定是在已经有的重心旁边，那么答案就是 $n-2maxson$，再更新一下重心就行（只会移动一步）。直接树剖维护，复杂度是 $\Theta(n\log^2 n)$。</p>
<p>但是可以单 $\log$，具体地，设重心在 $x$，$maxson&#x3D;k$，$id$ 为 $k$ 的编号。若加的是 $id$ 的子树里的点，判断 $id$ 是否能成为重心，如果可以 $id’ \leftarrow x,k\leftarrow \dfrac{n}{2},x\leftarrow id$，不然就是 $k \leftarrow k+1$。如果不在 $id$ 子树判断这个子树是否比 $id$ 子树更大，更新一下就行。用树状数组维护单点加，区间和，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1904F"><a href="#CF1904F" class="headerlink" title="CF1904F"></a>CF1904F</h3><p><a href="https://www.luogu.com.cn/problem/CF1904F">题目链接</a></p>
<p>注意到每个点点值不同，那么把小的连到大的，要求是个 dag 就行。用线段树优化建图，复杂度 $\Theta(n \log^2 n)$。</p>
<h3 id="CF1935F"><a href="#CF1935F" class="headerlink" title="CF1935F"></a>CF1935F</h3><p><a href="https://www.luogu.com.cn/problem/CF1935F">题目链接</a></p>
<p>显然每次连边只可能是 $(x,x+1)$，且最多只有一次是 $(x,x+2)$​。那么对于每个 $(x,x+1)$，当前仅当它们在一个点的两个不同子树中时有用，于是把 $(x,x+1)$ 挂到 $lca(x,x+1)$ 上，每次用并查集合并。然后子树的父亲的可以记录每个 $sum_u$ 为 $u$ 子树中最浅的 $lca(x,x+1)$，如果 $u$ 的儿子 $v$ 的 $sum_v$ 深度比 $u$ 浅就可以连，然后如果还不联通的话就要连 $(u-1,u+1)$。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1976F"><a href="#CF1976F" class="headerlink" title="CF1976F"></a>CF1976F</h3><p><a href="https://www.luogu.com.cn/problem/CF1976F">题目链接</a></p>
<p>经典题。考虑根度数是 $1$，所以第一次肯定是选从根开始的一条路径，那肯定就是最深的那个叶子。然后第二次就可以选两个到根的链，也一定是两个叶子（选两个原因：有个经典结论是在树上选 $2k$ 个点一定存在 $k$ 条链并集是它们的虚树），这个就是 BZOJ3252，长剖之后每个叶子的权值就是它到链头的长度，排个序就好了。复杂度 $\Theta(n\log n)$​，瓶颈在排序。</p>
<h1 id="图上问题"><a href="#图上问题" class="headerlink" title="图上问题"></a>图上问题</h1><h3 id="CF280D"><a href="#CF280D" class="headerlink" title="CF280D"></a>CF280D</h3><p><a href="https://www.luogu.com.cn/problem/CF280D">题目链接</a></p>
<p>选 $k$ 个可以描述为一个费用流模型，可以模拟费用流来做，但我不会。注意到它是凸的，所以线段树维护 $k$ 大子段和，可以闵可夫斯基和合并。复杂度 $\Theta(nk\log n)$，有 $16$​ 倍常数。</p>
<p><del>没过</del></p>
<h3 id="CF757F"><a href="#CF757F" class="headerlink" title="CF757F"></a>CF757F</h3><p><a href="https://www.luogu.com.cn/problem/CF757F">题目链接</a></p>
<p>以 $s$ 为起点求一遍最短路，把所有 $dis(v) &#x3D; dis(u)+w$ 的 <strong>有向边</strong> $(u,v,w)$ 保留，形成一个 dag。也就是要问这个 dag 上删掉一个点使得最多有多少与 $s$ 不连通的点。那就是求新图上起点为 $s$ 的支配树上除了 $s$ 的最大 $siz$ 是多少，直接建支配树求即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF878C"><a href="#CF878C" class="headerlink" title="CF878C"></a>CF878C</h3><p><a href="https://www.luogu.com.cn/problem/CF878C">题目链接</a></p>
<p>单次可以对每个项目排序，然后每个人连到第一个小于它的人，答案就是缩点之后每个入度为 $0$ 的 scc 的点数和。这个图还有个性质，就是它是一个链状物，一个点只可能连到链后面的点。所以加边的时候只有返祖边会寄。于是先按第一个项目把这条链求出来，加边的时候如果遇到返祖边就直接用个并查集把之间的点并起来。复杂度 $\Theta(nk\log n)$，用 set 维护。</p>
<h3 id="CF811E"><a href="#CF811E" class="headerlink" title="CF811E"></a>CF811E</h3><p><a href="https://www.luogu.com.cn/problem/CF811E">题目链接</a></p>
<p>因为一列是完整的，所以考虑用线段树维护维护两端的每个点所在的联通块编号。合并的时候先把中间的两列合并，然后再看左右两边是否有联通块被中间合并的时候一起合并了，并查集维护即可。</p>
<h3 id="CF903G"><a href="#CF903G" class="headerlink" title="CF903G"></a>CF903G</h3><p><a href="https://www.luogu.com.cn/problem/CF903G">题目链接</a></p>
<p>最大流&#x3D;最小割。为了方便，设 $A_0 \to A_1,A_n \to A_{n+1}, w&#x3D;0$， $B$ 同理 注意到切在 $A,B$ 的边分别恰好割一条，设它们分别是 $x,y$。那么要付出的代价就是 $a_x+b_y + \sum\limits_{u_i \le x,v_i &gt;y} w_i$。因为只有 $a_x$ 会改变，不妨先处理出来 $f_i &#x3D; \min\limits_j b_j + \sum\limits_{u_k \le i, v_k &gt; j} w_k$。考虑扫描线，初始每个位置 $j$ 的值为 $b_j$，然后扫 $i$，每遇到一个 $u_k &#x3D; i$，把 $[0,v_k - 1]$ 加上 $w_k$，然后求全局 $\min$ 即可，就处理处理 $f$ 了。然后 $a_x$ 的话就用个 $set$ 维护单点改，全局 $\min$ 就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="P4151"><a href="#P4151" class="headerlink" title="P4151"></a>P4151</h3><p><a href="https://www.luogu.com.cn/problem/P4151">题目链接</a></p>
<p>注意到随便从 $s$ 走到 $t$ 搞个路径出来，然后可以任意选环。由于异或的性质，不需要把所有环都拿出来，那可以先搞出个 dfs 树出来，然后把每条非树边在上面形成的环搞出来做个线性基就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF938G"><a href="#CF938G" class="headerlink" title="CF938G"></a>CF938G</h3><p><a href="https://www.luogu.com.cn/problem/CF938G">题目链接</a></p>
<p>用 P4151 的结论，然后套一个线段树分治。考虑怎么维护 dfs 树，使用带权并查集，但是因为每次会 findrt，所以连的边不是真实的。那么在连 $(u,v)$ 时，先找到 $u$ 到根的异或和，和 $v$ 到根的异或和，把 $w$ 异或上它们，再连就行。复杂度 $\Theta(n\log n(\log n + \log V))$。</p>
<h3 id="P7520"><a href="#P7520" class="headerlink" title="P7520"></a>P7520</h3><p><a href="https://www.luogu.com.cn/problem/P7520">题目链接</a></p>
<p>建出支配树，发现如果一个点会改变那么它的子树也会被改变。那么预处理每个点删了它父亲在原图的反图能走到哪些点，查询就查除了 $1\to u$ 的路径的那些点就行。复杂度 $\Theta(n(n+q))$。</p>
<h3 id="CF1348F"><a href="#CF1348F" class="headerlink" title="CF1348F"></a>CF1348F</h3><p><a href="https://www.luogu.com.cn/problem/CF1348F">题目链接</a></p>
<p>考虑构造一组解，贪心地，按右端点、左端点排序，每个区间取最左边能取的值，用个 set 维护。考虑怎么搞两组解，感受一下就可以发现遇到一个区间，它本来还能取到更往左的值，但是已经被取了，那么就可能与那个先取的那个区间交换。具体地，考虑设 $L_i$ 为排列中的值 $i$ 其被取的区间左端点，$R_i$ 为右端点。那么考虑从小到大枚举每个值，就是要找到一个 $L_i \le j&lt;i\le R_j$，那么扫到一个值的时候往 $R_i$ 处插入 $i$ 以便到时候删除，然后用个 set 维护插入删除，每次二分找到一个 $\ge L_i$ 的可以了。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1419F"><a href="#CF1419F" class="headerlink" title="CF1419F"></a>CF1419F</h3><p><a href="https://www.luogu.com.cn/problem/CF1419F">题目链接</a></p>
<p>先把 $n$ 个点连边排序，依次加边。注意到一个点只能走到 $4$ 个不同的位置，所以当且仅当现在只有 $\le 4$ 个联通块时可能存在。所以当第一次只剩 $4,3,2$ 个联通块时判断一下，这里最多只有 $3$ 种情况。每次可以考虑枚举两个 $x,y$ 都不同的点，算出它们所在长方形的其他两个点，把这两个点标记上枚举的这两个点分别所在的联通块（在这些点上记录每个联通块到它最短距离），然后找到一个最优的点满足所有联通块到它的最远距离最小，更新答案。注意到有 $2$ 个联通块的时候不一定有上述情况，所以可以枚举两个点算它们之间的距离即可。具体可以使用 dsu 实现，复杂度 $\Theta(n^2 \log n)$。</p>
<h3 id="CF1439B"><a href="#CF1439B" class="headerlink" title="CF1439B"></a>CF1439B</h3><p><a href="https://www.luogu.com.cn/problem/CF1439B">题目链接</a></p>
<p>考虑先把所有度数大于等于 $k$ 的点加入一个集合。然后计算出每个集合中的点邻居有多少个，然后如果有点邻居小于 $k$，那就把它删了。可以用堆维护，重复这个过程，最后如果有剩下的那就是第一合法的子集。考虑团怎么求，相似地，我们可以考虑枚举每个度数大于等于 $k-1$ 的点，重复上面的过程，只不过把下限调整为 $k-1$。考虑如果没有 $k-1$ 的点的话上面的点集肯定能找到，所以这个团肯定包括一个邻居 <strong>恰好</strong> $k-1$ 的点，那么我们枚举这些点，暴力 $\Theta(k^2)$ 判断这些点的邻居是否组成一个团。注意到一个团有 $\Theta(k^2)$ 条边，而边集是 $\Theta(m)$ 级别的，所以合法的 $k$ 肯定不超过 $\Theta(\sqrt{m})$，且邻居有 $k-1$ 个点的点最多有 $\Theta(\dfrac{m}{k})$ 个，所以复杂度为 $\Theta(mk)$ 即 $\Theta(m\sqrt{m})$。实现的时候会多带个 $\Theta(\log n)$，因为要查找 $(u,v)$ 是否有边。使用 unordered_map 会很慢很慢。</p>
<h3 id="CF1550F"><a href="#CF1550F" class="headerlink" title="CF1550F"></a>CF1550F</h3><p><a href="https://www.luogu.com.cn/problem/CF1550F">题目链接</a></p>
<p>考虑两两连边，求出 mst，那么 $k$ 就要大于 mst 上路径边权最小值。考虑使用 boruvka 算法，那么就是每次从一个点出发，问最近能走到哪个不在同一联通块中的点。那么就说要从每个 $u$ 开始，看看 $u-d,u+d$ 左右两侧第一个不和 $u$ 在同一联通块的位置。由于 $u-d,u+d$ 是固定的，所以可以预处理出来这两个位置左右的第一个点。然后每次迭代之后对于每个点求出 $L_i,R_i$ 表示左边和右边第一个和它不同的点。这样就能做到 $\Theta(n\log n)$​ 了。</p>
<h3 id="P6628"><a href="#P6628" class="headerlink" title="P6628"></a>P6628</h3><p><a href="https://www.luogu.com.cn/problem/P6628">题目链接</a></p>
<p>考虑对每个 $i$ 单独处理就是要走一个 $s \to i$ 的欧拉通路。那么就说要考虑度数+连通性，因为连边是 $|i-j|$，所以任何 $(i,j)$ 都可以转化为 $(i,i+1),(i+1,i+2)\cdots (j-1,j)$。然后先把 $m$ 条边加进来，再加入一条 $(s,i)$ 的虚边，对于所有奇数点排序相邻连边。然后连通性也是类似，把相邻两个不连通的点的边加入，求 mst 就行。（加虚边不影响连通性是因为如果 $(s,i)$ 删了之后不在同一联通块，那么就有一个联通块有恰好 $1$ 个奇数点，显然不可能）复杂度 $\Theta(n\log^2 n)$​。</p>
<h3 id="CF1682F"><a href="#CF1682F" class="headerlink" title="CF1682F"></a>CF1682F</h3><p><a href="https://www.luogu.com.cn/problem/CF1682F">题目链接</a></p>
<p>其实把所有 $b_i &lt; 0$ 看成 $-b_i$ 个黑点，$b_i &gt; 0$ 看成 $b_i$ 个白点，那就是两两匹配最短长度和。那其实就是每个点往前面第一个与它不同颜色没匹配的匹配。直接统计是可以，但是不太方便。考虑一个 $(a_i,a_i + 1)$ 的贡献，由于保证 $b$ 之和是 $0$，所以必定有 $sum_{i-1} - sum_{l-1} &#x3D; -(sum_r - sum_{i-1})$。那么贡献就是 $(a_i - a_{i-1}) \cdot |sum_{i-1} - sum_{l-1}|$。那直接离线下来，二维数点即可，可以对 $sum$ 排序算 $[l+1,r]$ 之间的贡献，就可以用 bit 统计了。复杂度 $\Theta(n\log n)$。</p>
<h1 id="分治问题"><a href="#分治问题" class="headerlink" title="分治问题"></a>分治问题</h1><h3 id="CF452F"><a href="#CF452F" class="headerlink" title="CF452F"></a>CF452F</h3><p><a href="https://www.luogu.com.cn/problem/CF452F">题目链接</a></p>
<p>枚举 $i$，考虑差为 $k$，即 $a_i - k,a+k$ 是否在不同的两侧。把在 $i$ 前面的 $a_j$ 设为 $1$，就是要找以 $i$ 为中心半径在 $\min(a_i,n-a_i + 1)$ 的串是否是回文串。线段树维护即可。复杂度 $\Theta(n\log n)$​。</p>
<h3 id="CF480E"><a href="#CF480E" class="headerlink" title="CF480E"></a>CF480E</h3><p><a href="https://www.luogu.com.cn/problem/CF480E">题目链接</a></p>
<p>倒序加点处理，设 $f_{i,j}$ 为 $(i,j)$ 能往上走几步，$g_{i,j}$ 往下。每次加点 $(x,y)$ 只会影响 $f_{i,y},g_{i,y}$，可以 $\Theta(nk)$ 修改。考虑每次对答案的增加，显然是枚举 $x$ 这一行，然后 $[l,r]$ 合法当且仅当 $\min\limits_{k\in [l,r]} f_{x,k} + \min\limits_{k\in[l,r]} g_{x,k} - 1 \ge r - l + 1$。由于答案是单调的，所以直接枚举上次答案 $ans+1$，作为 $r-l+1$，做一个滑动窗口就行。复杂度 $\Theta(nk)$。</p>
<h3 id="CF549F"><a href="#CF549F" class="headerlink" title="CF549F"></a>CF549F</h3><p><a href="https://www.luogu.com.cn/problem/CF549F">题目链接</a></p>
<p>考虑分治，枚举最大值的一边，设最大值在左边，那么枚举 $i$，也就是问有多少个 $j$ 满足 $j\in [mid+1,r],sum_{mid} - sum_{j} \equiv sum_{mid} -sum_{i-1}-\max\limits_{p\in[i,mid]} a_p \pmod{k}$，可以考虑双指针实现。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF750E"><a href="#CF750E" class="headerlink" title="CF750E"></a>CF750E</h3><p><a href="https://www.luogu.com.cn/problem/CF750E">题目链接</a></p>
<p>考虑 $[1,n]$ 怎么做，设 $f_{i,0&#x2F;1&#x2F;2&#x2F;3&#x2F;4}$ 为前 $i$ 个匹配到 $\empty,2,0,1,7$ 的最小代价。转移为设当前字符是 $x$（第 $x$ 个），那么有 $f_{i,x-1} &#x3D; f_{i-1,x-1}+1,f_{i,x}&#x3D;\min{f_{i-1,x},f_{i-1,x-1}},f_{i,j}&#x3D;f_{i-1,j}(j\neq x \and j\neq x-1)$。特别地，如果这一位是 $6$，那么有 $f_{i,3}&#x3D;f_{i-1,3}+1,f_{i,4}&#x3D;f_{i-1,4}+1$。区间询问使用广义矩乘做就行，可以倍增做。复杂度 $\Theta(nk^3 \log n)$，其中 $k&#x3D;5$。</p>
<h3 id="CF763E"><a href="#CF763E" class="headerlink" title="CF763E"></a>CF763E</h3><p><a href="https://www.luogu.com.cn/problem/CF763E">题目链接</a></p>
<p>跟 CF811E 类似，由于一个点只会连与它距离不超过 $k$ 的点，所以如果一个联通块最左、最右是 $l,r$，并且 $[l-k,l-1],[r+1,r+k]$ 都没有跟这个联通块相连的，那么再往外就不可能有与它相连的了。所以也考虑线段树维护 $[l,r]$，记录 $[l,r]$ 的联通块个数，并且维护 $[l,l+k-1],[r-k+1,r]$ 每个点所在的联通块。合并直接开个 $4k$ 大小空间的并查集合并这些点就好了，注意区间小的时候还要更新左边和右边的 $k$ 个点。复杂度 $\Theta(nk^2 \log n)$​。</p>
<h3 id="CF848C"><a href="#CF848C" class="headerlink" title="CF848C"></a>CF848C</h3><p><a href="https://www.luogu.com.cn/problem/CF848C">题目链接</a></p>
<p>套路地将最后一次出现的下标描述成 $nxt_i &gt;r$ 的 $i$。那么答案就是 $\sum\limits_{i&#x3D;l}^r i[nxt_i &gt; r]-\sum\limits_{i&#x3D;l}^r i[pre_i &lt; l]$。那么考虑一个 $(i,nxt_i)$，将 $[1,i][i,nxt_i - 1]$ 区间加上 $i$，把 $(i,pre_i)$ 的 $[pre_i + 1,i][i,n]$ 矩阵减去 $i$。再开 $\Theta(V)$ 个 set 维护每个值出现位置，每次单点修改只用更新 $\Theta(1)$ 个值。所以就要支持矩阵加，单点求值。在线就可以树套树，离线可以 cdq 三维数点。复杂度 $\Theta(n\log^2 n)$。	</p>
<h3 id="CF1004F"><a href="#CF1004F" class="headerlink" title="CF1004F"></a>CF1004F</h3><p><a href="https://www.luogu.com.cn/problem/CF1004F">题目链接</a></p>
<p>经典 trick 是前缀或和不超过 $\log V$ 段。所以线段树上直接维护被完全包含在当前区间的答案和前缀、后缀的或和 <strong>段</strong>。合并的时候，后缀从右边继承，再接上左边，前缀同理。答案是左边加上右边，然后再做个双指针，左边从 $mid$ 往左扫，右边从 $mid+1$ 往右扫即可，合并复杂度 $\Theta(\log V)$。单点改就直接改。所以总复杂度就说 $\Theta(n\log n \log V)$。</p>
<h3 id="CF1140F"><a href="#CF1140F" class="headerlink" title="CF1140F"></a>CF1140F</h3><p><a href="https://www.luogu.com.cn/problem/CF1140F">题目链接</a></p>
<p>注意到满足要求的肯定是一个缺一个角的矩形，补上去会形成一个完整的矩形。然后再考虑一直这样做最后会形成什么，就是会形成一堆矩形，且它们的行列都是不同的。这启发我们找一个联通块，然后就会注意到如果对于每个点，把它的行列连边，最后得出来的每个联通块就会形成一堆矩形。考虑线段树分治，并查集维护连通性和行列数量即可。复杂度 $\Theta(n\log^2 n)$。</p>
<h3 id="CF1316F"><a href="#CF1316F" class="headerlink" title="CF1316F"></a>CF1316F</h3><p><a href="https://www.luogu.com.cn/problem/CF1316F">题目链接</a></p>
<p>即求每个子序列的代价和，考虑对每个相邻点对 $(a_i, a_{i+1})$ 求贡献。考虑线段树维护值域，对每个区间 $[l,r]$ 记录只保留值在 $[l,r]$ 的点的所有点对值乘方案的和，每个点的 $p_i \times 2^{L_i}$ ，$L_i$ 为 $i$ 左边的点数，和 $p_i \times 2^{R_i}$，记作 $suml,sumr$，还有区间中的点数 $cnt$ 。合并时，$ans&#x3D;ans_{ls} \times 2^{cnt_{rs}} + ans_{rs} \times 2^{cnt_{ls}}+suml_{ls} \times sumr_{rs}$，$suml &#x3D; suml_{ls} +suml_{rs}\times 2^{cnt_{ls}},sumr&#x3D;sumr_{ls} \times 2^{cnt_{rs}} + sumr_{rs},cnt&#x3D;cnt_{ls}+cnt_{rs}$。 因为有重复的值，所以对所有可能出现的数排序放到下标就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1371F"><a href="#CF1371F" class="headerlink" title="CF1371F"></a>CF1371F</h3><p><a href="https://www.luogu.com.cn/problem/CF1371F">题目链接</a></p>
<p>考虑线段树维护每个区间正着和反着的信息。考虑答案需要记录什么，要知道从一端走能到达哪里，要知道两端溢出了多少球。于是线段树记录 $ans,tL,tR,L,R$ 分别表示此区间的答案，左边溢出的球，右边溢出的球，（从左边加球能到达的位置，那个位置的球数量），右边同理。转移是简单的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c.tL = (R.se == l ? tL + b.tL : tL), c.tR = (b.L.se == b.r + 1 ? b.tR + tR : b.tR);</span><br><span class="line">c.L = (L.se == b.l ? make_pair(tR + b.L.fi, b.L.se) : make_pair(L.fi + (R.se == L.se ? b.tL : 0), L.se));</span><br><span class="line">c.R = (b.R.se == b.l ? make_pair(b.tL + R.fi, R.se) : make_pair(b.R.fi + (b.R.se == b.L.se ? tR : 0), b.R.se));</span><br><span class="line">c.l = l, c.r = b.r;</span><br></pre></td></tr></table></figure>

<p>区间取反直接打标记，交换正反信息即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1373G"><a href="#CF1373G" class="headerlink" title="CF1373G"></a>CF1373G</h3><p><a href="https://www.luogu.com.cn/problem/CF1373G">题目链接</a></p>
<p>一个点如果一直往第 $k$ 行走，设它最前能到达的格子为 $x$，那么它可以被放到 $[x,n]$ 这些格子里。那么要把一堆点都能放完的话，设 $suf_i$ 为 $[i,n]$ 有多少个 $x$，条件就是 $\forall i,suf_i \le m-i+1$ 即 $suf_i + i - 1\le m$，最小的 $m$ 即 $suf_i + i - 1$ 的最大值。</p>
<p>考虑动态修改，使用线段树维护，每次插入一个 $x$ 把 $[1,x]$ 加 $1$，删除减 $1$，查全局最大即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1379F2"><a href="#CF1379F2" class="headerlink" title="CF1379F2"></a>CF1379F2</h3><p><a href="https://www.luogu.com.cn/problem/CF1379F2">题目链接</a></p>
<p>考虑相邻两行，注意到每相邻两行 $(2x+1,2x+2)$ 直接最多只能放 $m$ 个，又因为只有 $2n$ 行，所以每相邻两行必须放 $m$ 个。显然，这 $m$ 个如果能放到 $2x+1$ 这行肯定最优，否则就是 $2x+1$ 这行有个地方挡住了，只能放到 $2x+2$ 行，那么上面就是一个前缀，下面就是一个后缀，分别对应 $1$ 到 $2x+1$ 这行第一个空缺的位置 $x$，$2x+2$ 行最后一个空缺的位置 $y$ 到 $2m$，所以这里要求 $x&gt; y$，设上面那行是在第 $t$ 个放完后终止的，那么 $t\in [\dfrac{y}{2},\dfrac{x-1}{2}]$。并且要求 $\forall i,t_i \ge t_{i+1}$。</p>
<p>问题转化为，给定 $n$ 个区间，动态修改区间，要求在每个区间中取一个数，且这个数不能大于上次取的。由于拓展区间不好做，不妨使用线段树分治把动态修改区间改为动态缩减区间。贪心的想法是每个区间尽量往右取，那么每取完一个 $x$ 就直接对后面所有区间的 $r$ 对 $x$ 取 $\min$ 即可，如果碰到一个 $l&gt;r$ 就是不合法的了。</p>
<p>复杂度 $\Theta(n\log^2 n)$。</p>
<h3 id="CF1439C"><a href="#CF1439C" class="headerlink" title="CF1439C"></a>CF1439C</h3><p><a href="https://www.luogu.com.cn/problem/CF1439C">题目链接</a></p>
<p>看到形如 $y \ge a_i,y\to y-a_i$ 的形态，第一时间想倍增分块。注意到这个 $a$ 无论何时都是不增的，这也就避免了倍增分块中要考虑 $&lt;2^k$ 的和的情况。</p>
<p>那么现在思路就明确了，若现在在 $x$，设能连续取的极长长度为 $len$，也就是能连续取完 $[x,x+len-1]$。若 $len &lt; n-x+1$，那么 $y$ 必定会减半，因为若不减半，最后一个取的一定小于 $\dfrac{y}{2}$，后一个依然小于 $\dfrac{y}{2}$，那么显然可以再取一个。</p>
<p>考虑怎么跳，显然直接在线段树上二分找到下一个位置即可。考虑修改，如果直接吉司机当然可以，但是每必要，也是直接二分找到第一个 $&lt;y$ 的位置即可。</p>
<p>复杂度 $\Theta(n\log n \log V)$。</p>
<h3 id="CF1386C"><a href="#CF1386C" class="headerlink" title="CF1386C"></a>CF1386C</h3><p><a href="https://www.luogu.com.cn/problem/CF1386C">题目链接</a></p>
<p>首先观察奇环怎么处理，只需要找到一棵生成树然后对于每个非树边看看和树边形成的环是否为奇环即可，可以使用带权并查集维护。具体地，当连接一条边时，由于并查集上的边不是真实的边，所以找到 $(x,y)$ 到 $(rt_x,rt_y)$ 的边权异或和，将其异或 $1$ 然后作为 $(rt_x,rt_y)$ 的边权。每次查询 $(x,y)$ 直接找到 $(x,y)$ 到根的边权异或和异或起来是 $0$ 即可。</p>
<ul>
<li>解法一 $\Theta(n\sqrt{n})&#x2F;\Theta(n\sqrt{n}\log n)$</li>
</ul>
<p>考虑把边的序列复杂一边接到后面，然后每次询问就是用一个区间的边。使用不删除莫队，直接维护即可。复杂度可能带个 $\log$，由于要撤销并查集，不能使用路径压缩。</p>
<ul>
<li>解法二 $\Theta(n\log n)&#x2F;\Theta(n\log^2 n)$</li>
</ul>
<p>考虑令 $nxt_i$ 为以 $i$ 作为左端点，最远的 $r$ 使得删掉 $[i,r]$ 这段区间还有奇环。显然 $nxt_i$ 是随 $i$ 单调不降的。考虑使用分治优化决策单调性，设 $f(l,r,L,R)$ 为处理 $[l,r]$ 的 $nxt$，并且值域（即决策点）在 $[L,R]$ 范围内。递归到 $f(l,r,L,R)$ 时，应先加入所有除了 $[l,R]$ 的边，然后令 $mid &#x3D; \lfloor\dfrac{l+r}{2}\rfloor$，考虑从 $R$ 往 $L$ 依次加入每条边，一旦有奇环那么 $nxt_{mid}$ 就设为当前枚举的边。然后就递归地调用 $f(l,mid-1,L,nxt_{mid})$，注意此时<strong>不需要</strong>撤销 $[nxt_{mid}+1,R]$ 的边。然后处理完左边后撤销掉 $[nxt_{mid} + 1,R]$ 的边，加入 $[l,mid]$ 的边，再做 $f(mid+1,r,nxt_{mid},R)$。返回的时候再撤销掉即可。复杂度也会多个 $\log n$，因为并查集。</p>
<h3 id="CF1442D"><a href="#CF1442D" class="headerlink" title="CF1442D"></a>CF1442D</h3><p><a href="https://www.luogu.com.cn/problem/CF1442D">题目链接</a></p>
<p>先观察一下最后答案长什么样，发现一定是一堆整串再加上至多一个前缀。因为若有两个前缀，可以考虑把下一个数较大的前缀往后取一位，另一个最后删一位，一定是更优的。所以问题转化为有 $n$ 个物品，每个重量 $len_i$，价值 $sum_i$，且能额外取一个前缀，要求取的重量不超过 $n$。</p>
<p>朴素的想法是枚举那个前缀在的串，然后其他的用个背包，但因为是最优化，所以不能可撤销背包来搞。既然不能直接删除一个物品，那么考虑不用删除物品的<strong>分治</strong>。当在做 $f(l,r)$ 的时候，若下一步做 $f(l,mid)$，那么先把当前的背包值记录下来，然后加入 $[mid+1,r]$ 这些物品，再递归下去。返回的时候还原之前记录的背包数组，然后加入 $[l,mid]$，再做右边 $f(mid+1,r)$。这样的话一个节点的复杂度是 $\Theta(len\cdot k)$。</p>
<p>总复杂度为 $\Theta(nk\log n)$。</p>
<h3 id="CF1648D"><a href="#CF1648D" class="headerlink" title="CF1648D"></a>CF1648D</h3><p>考虑一个朴素 dp，设 $f_i$ 为走到 $(2,i)$ 的最大价值，$sum_i$ 为第二行的前缀和，$a_i$ 为第一行的前缀和，$b_i$ 为第三行的后缀和。转移有 $f_i &#x3D; sum_i + \max\limits_{j&lt;i}(\max(f_j-sum_{j},a_j-sum_{j-1}) -\min\limits_{l_x \le j \le r_x} k_x)$ 。重点在于 $-\min\limits_{l_x \le j \le r_x} k_x$。</p>
<p>考虑分治，用 cdq 的思想，先把左边的 $f$ 处理出来，然后通过 $j\in [l,mid]$ 去更新 $i\in [mid+1,r]$，先对左边 $[l,mid]$ 记录后缀最大 $suf_i &#x3D; \max\limits_{j&#x3D;i}^{mid} \max(f_j-sum_{j},a_j-sum_{j-1})$。考虑把 $(l,r,k)$ 分为两种。</p>
<ul>
<li>$r_x \in [mid+1,r]$ 那么可以对 $i\in [mid+1,r_x]$ 的 $f_i$ 对 $suf_{\max(l_x,l)} - k_x$ 取最大。由于每个这样的 $(l,r,k)$ 只会出现 $\Theta(\log n)$ 次，复杂度 $\Theta((n+q)\log n)$。</li>
<li>$r_x&gt;r$ 那么这样的 $(l,r,k)$ 一定是在当前节点的祖先是出现在第一种的，并且是递归到了左边。那么考虑在那个祖先的地方递归到左边的时候在 $l_x$ 处插入一个 $k$。<ul>
<li>若 $l_x \ge l$ 在做 $suf_i$ 的是时候直接找到 $[l,i]$ 中最小的 $k_x$ 即可，用它更新所有 $[mid+1,r]$。</li>
<li>否则的话一定是上面那种递归到右端点的，这时候的分治区间被 $[l_x,r_x]$ 完全包含，所以记录最小那个即可。</li>
</ul>
</li>
</ul>
<p>总复杂度为 $\Theta((n+q)\log n)$。</p>
<h3 id="CF1654F"><a href="#CF1654F" class="headerlink" title="CF1654F"></a>CF1654F</h3><p><a href="https://www.luogu.com.cn/problem/CF1654F">题目链接</a></p>
<p>考虑异或的性质，若第 $i$ 位为 $1$，那么就是将原序列以 $2^{i-1}$ 为一块分成若干块，奇数块和偶数块交换。设 $f(x,i)$ 为异或 $x$ 形成的新序列的前 $2^i$ 个形成的序列，那么显然 $f(x,i)&#x3D;f(x,i-1)+f(x\oplus 2^{i-1},i-1)$。设 $g(x,i)$ 为异或 $x$ 形成的新序列的前 $2^i$ 个数在异或 $[0,2^n -1]$ 形成的所有新序列中的排名，那么直接以 $(g(x,i-1),g(x\oplus 2^{i-1},i-1))$ 为关键字排序即可得到 $g(x,i)$。复杂度 $\Theta(n\log^2 n)$。</p>
<h3 id="CF1693D"><a href="#CF1693D" class="headerlink" title="CF1693D"></a>CF1693D</h3><p><a href="https://www.luogu.com.cn/problem/CF1693D">题目链接</a></p>
<p>首先观察一下，发现无解的充要条件是存在一个四元组 $(a,b,c,d)$ 满足 $a&lt;b&lt;c&lt;d$ 使得 $p_b &gt; p_a &gt; p_d &gt; p_c$ 或 $p_c &gt; p_d &gt; p_a &gt; p_b$。因为这两种形态满足它们都是两个上升或下降子序列组成的且都不相交。然后考虑统计，设 $pre_i$ 为 $i$ 之前最大的 $j$ 满足区间 $[j,i]$ 无解，考虑第二种形态，设 $L_i$ 为 $i$ 前面第一个大于 $p_i$ 的点，$R_i$ 为 $i$ 后面第一个小于 $p_i$ 的点。所以 $pre_i$ 就是最大的 $j$ 满足 $R_j &lt; L_i,p_j&lt;p_i$，直接二维偏序，bit 维护即可。第一种形态可以直接把序列变成 $n-p_i + 1$ 再做一遍就行。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1730E"><a href="#CF1730E" class="headerlink" title="CF1730E"></a>CF1730E</h3><p><a href="https://www.luogu.com.cn/problem/CF1730E">题目链接</a></p>
<p>先预处理每个位置是最大值的区间 $[L_i,R_i]$ 满足 $\forall j \in [L_i,i-1],a_j &lt; a_i \land \forall j\in [i+1,R_i],a_j \le a_i$，再预处理每个数前面第一个比它小的和后面第一个比它小的位置 $pre_i,suf_i$，可以单调栈 $\Theta(n)$ 预处理。</p>
<p>考虑枚举最大值的位置 $i$，枚举 $a_i$ 的因数 $x$。找到 $i$ 前面 $x$ 第一个出现的位置 $lst$ 和 $i$ 后面第一次出现的位置 $nxt$。讨论 $[lst,i]$ 和 $[i,nxt]$ 是否最小值是 $x$。若 $[lst,i]$ 最小值为 $x$，那左端点可以取到 $[\max(L_i,pre_{lst}),lst]$，否则若 $[i,nxt]$ 最小值是 $x$，那么左端点可以取到 $(suf_{lst},i]$，右端点可以取到 $[nxt,\min(R_i,suf_{nxt})]$。右边同理。若 $lst$ 不存在，左端点可以取到 $[pre_{nxt},i]$，右端点同上。$nxt$ 不存在同理。</p>
<p>设值域为 $m$，复杂度 $\Theta(m\log m + nd(m))$。</p>
<h1 id="位问题"><a href="#位问题" class="headerlink" title="位问题"></a>位问题</h1><h3 id="CF241B"><a href="#CF241B" class="headerlink" title="CF241B"></a>CF241B</h3><p><a href="https://www.luogu.com.cn/problem/CF241B">题目链接</a></p>
<p>考虑先找到第 $m$ 大的两两异或值。二分答案 $x$，然后对每个数 $a_i$ 找到所有 $j&lt;i,a_i\oplus a_j \le x$ 的 $(i,j)$ 对数，可以用 trie 实现，这部分复杂度 $\Theta(n\log^2 a)$。</p>
<p>然后可以先找到前 $m$ 大有多少个 $x$，可以用 $m$ 减去异或和 $\le x-1$ 的对数得到。那么就是求 $\sum\limits_{i&#x3D;1}^n \sum\limits_{j&#x3D;1}^{i-1} [a_i \oplus a_j &lt; x] (a_i \oplus a_j)$。也可以用 trie 实现，查询 $i$ 时，可以先找到 trie 上哪些子树里的数是合法的，然后拆位算贡献，对于 trie 上每个节点记录它子树中第 $j$ 位是 $0&#x2F;1$ 的数的个数，异或上 $x$ 对应位即可。复杂度也是 $\Theta(n\log^2 a)$。</p>
<p>总复杂度 $\Theta(n\log^2 a)$。</p>
<h3 id="CF633G"><a href="#CF633G" class="headerlink" title="CF633G"></a>CF633G</h3><p><a href="https://www.luogu.com.cn/problem/CF633G">题目链接</a></p>
<p>注意到 $m$ 很小，可以对每个点记录子树中每个值的出现情况。设 $f_{i,j}$ 表示值 $j$ 是否在 $i$ 子树中出现，对 $i$ 子树加 $v$ 相当于将其向右循环移位 $v$ 次。但是由于子树加 $v$ 还会影响祖先的 $f$ 值，所以不能这样维护。</p>
<p>考虑换种方式，查的时候直接将子树里的值或起来就行。使用线段树 + dfn 序列维护，每次相当于区间循环移位，区间求或，可以套个 bitset，复杂度 $\Theta(\dfrac{m(n+q\log n)}{w})$。</p>
<h3 id="CF796F"><a href="#CF796F" class="headerlink" title="CF796F"></a>CF796F</h3><p><a href="https://www.luogu.com.cn/problem/CF796F">题目链接</a></p>
<p>考虑操作 $1$。</p>
<ul>
<li>若 $[l,r]$ 中已确定的最大值为 $x$，则表示剩下的区间中的每个数都小于等于 $x$。</li>
<li>若 $[l,r]$ 中已确定的都小于 $x$，那么剩下的区间中每个数都小于等于 $x$，且存在一个数为 $x$。</li>
</ul>
<p>现在问题转化为，给定若干个限制（可能达到 $\Theta(n^2)$ 级别）表示一个区间的数小于等于一个数，或者一个区间的数小于等于一个数且存在一个数等于。那么按照 $x$ 从小到大排序，显然只用考虑所有之前没覆盖的位置，如果是第二种限制，那就先随便钦定一个位置为 $x$，若还有剩下位置没钦定，那么设之前自己确定的所有位置或和为 $sum$，从高到低枚举每个位置，若 $sum$ 这个位置为 $0$ 且加上后不超过 $x$ 就加上，显然最多确定两个数就能到达目前的最优了。</p>
<p>那么还有一个问题，就是限制是 $\Theta(n^2)$ 级别的，该如何优化？注意到每次操作只会改一个点，那么处理出来每个点什么时候第一次被改即可，套上个线段树分治，每次直接找每个包含 $t$ 的在 $[l,r]$ 中的点删掉即可。</p>
<p>复杂度 $\Theta(n\log^2 n)$。</p>
<h3 id="CF1511G"><a href="#CF1511G" class="headerlink" title="CF1511G"></a>CF1511G</h3><p><a href="https://www.luogu.com.cn/problem/CF1511G">题目链接</a></p>
<p>题目就是要求 $\oplus_{i&#x3D;l}^r (a_i - l)$，$a_i$ 是值是 $i$ 的所有数异或和。考虑倍增，设 $f_{i,j}$ 为 $l&#x3D;i$ 时 $[i,i+2^{j} -1]$ 区间的异或和，此时这个区间里所有数减 $i$ 的第 $j$ 位都必定是 $0$。那么转移的时候，由于 $[i+2^{j-1},i+2^j - 1]$ 这段区间减 $i+2^{j-1}$ 的第 $j-1$ 位也是，所以可以直接异或上 $2^{j-1}cnt_{i+2^{j-1},i+2^j-1}$，即 $f_{i,j}&#x3D;f_{i,j-1}\oplus f_{i+2^{j-1},j-1}\oplus (2^{j-1}\times (cnt_{i+2^{j-1},i+2^j - 1} \operatorname{mod} 2))$。 </p>
<p>回答询问也是类似搞即可。复杂度 $\Theta((m+q)\log m)$。</p>
<h3 id="CF1730F"><a href="#CF1730F" class="headerlink" title="CF1730F"></a>CF1730F</h3><p><a href="https://www.luogu.com.cn/problem/CF1730F">题目链接</a></p>
<p>先求出 $p$ 的逆排列 $pos$，然后就是把每个数 $i$ 填到 $p$ 里面，满足 $i$ 出现在 $j$ 前面时 $i \le j+k$，求 $pos_i$ 的逆序对最大。</p>
<blockquote>
<p>对于任意的 $i$，$q$ 前 $i$ 个数中所有 $\le i-k$ 的数都必须存在。</p>
</blockquote>
<p>证明：若存在 $x\le i-k$ 且 $x$ 不在 $q$ 中前 $i$ 个数，则 $q$ 中前 $i$ 个数的最大值 $t \ge i+1$，由于 $x$ 不在前 $i$ 个中，所以 $t\le x + k \le i$，又因为 $t\ge i+1$，故矛盾。</p>
<blockquote>
<p>对于任意的 $i$，$q$ 前 $i$ 个数中所有 $&gt;i+k$ 的数都不能存在。</p>
</blockquote>
<p>证明：若存在 $x&gt;i+k$ 在 $q$ 前 $i$ 个数中，则 $q$ 中前 $i$ 个数中第一个没出现的数 $t \le i$，由于 $x$ 在 $t$ 前面，所以 $x\le t+k$，即 $t&gt;i$，矛盾。</p>
<p>那么可以得出前 $i$ 个数中不确定是否存在的数只有 $[i-k+1,i+k]$ 这 $2k$ 个。</p>
<blockquote>
<p>对于任意的 $i$，$q$ 前 $i$ 个数肯定是一段连续的值域再加上 $[i+1,i+k+1]$ 的某些数</p>
</blockquote>
<p>这是显然的。</p>
<p>设 $f_{i,j}$ 为加入了前 $[1,i]$ 这些数，$[i+1,i+k+1]$ 的出现情况是 $j$ 的最小逆序对个数，枚举转移即可。复杂度 $\Theta(n^2 + nk2^k)$。</p>
<h1 id="贪心问题"><a href="#贪心问题" class="headerlink" title="贪心问题"></a>贪心问题</h1><h3 id="CF30E"><a href="#CF30E" class="headerlink" title="CF30E"></a>CF30E</h3><p><a href="https://www.luogu.com.cn/problem/CF30E">题目链接</a></p>
<p>考虑对一个 $a’$ 找到其对于的 $a$，肯定是越前越优，那么拿 $S$ 的反串做个 kmp 即可得到每个 $a$ 的第一次出现位置。然后就是在区间中找最长的奇回文串，manacher 预处理，然后二分半径 $len$，看看 $[l+len-1,r-len+1]$ 是否存在 $p_i \ge len$ 即可，st 表维护。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF187E"><a href="#CF187E" class="headerlink" title="CF187E"></a>CF187E</h3><p><a href="https://www.luogu.com.cn/problem/CF187E">题目链接</a></p>
<p>特判 $l&#x3D;0,1$。</p>
<p>由于最左、最右都要去，所以答案有个明显的下界是 $\min(x_s -x_1,x_n - x_s)+x_n-x_1$。假设取到 $x_s-x_1$（可以翻转再做一遍），那么最优肯定是要从 $s$ 先往左走到 $1$，然后跳到 $s+1$ 再一直往右走到 $n$，但会出现左票不足或过多的情况。</p>
<ul>
<li>左票不足：那就是先往左走几步，然后跳到 $1$，往右走回来的时候再走那些没走过的。</li>
<li>左票太多：那就是 $[s+1,n]$ 这些位置有些要通过左票到达，那一个点在 $s$ 右边且被左票到达肯定是往右走到了某个点然后往回走到了它，这时有可能是从 $n$ 往回走的，那么 $[x_i,x_{i+1}]$ 这段区间只用走 $2$ 次，否则就要走 $3$ 次，那么枚举终点在哪里，找到 $s$ 到终点这段区间中前 $k$ 小的区间换成左票即可，$k$ 是左票剩的减去从 $n$ 走回终点的。</li>
</ul>
<p>可以用平衡树或线段树维护前 $k$ 小，复杂度 $\Theta(n\log n)$​。</p>
<h3 id="CF196D"><a href="#CF196D" class="headerlink" title="CF196D"></a>CF196D</h3><p><a href="https://www.luogu.com.cn/problem/CF196D">题目链接</a></p>
<p>考虑找到原串最大位置 $pos$ 使得 $s[1,pos]$ 没有长度大于等于 $d$ 的回文子串，然后从 $pos$ 开始尝试替换。注意到只用考虑长度为 $d,d+1$ 的回文串，因为 $d+2,d+3$ 的包含 $d,d+1$ 的。如果 $pos$ 往前某个位置替换成一个字符后，以它结尾的 $d,d+1$ 的串都不是回文串，那就开始往后加字符，直接暴力枚举判断是否合法即可。复杂度 $\Theta(nc)$​。</p>
<h3 id="CF436E"><a href="#CF436E" class="headerlink" title="CF436E"></a>CF436E</h3><p><a href="https://www.luogu.com.cn/problem/CF436E">题目链接</a></p>
<p>考虑反悔贪心，每次添加一个星星，有几种情况。</p>
<ul>
<li>从选了一个的加上 $b_i- a_i$</li>
<li>从没选的加上 $a_i$</li>
<li>从选了一个的和没选的加上 $-a_i + b_j$</li>
<li>从选了两个的和没选的加上 $a_i - b_i + b_j$</li>
</ul>
<p>用五个堆维护最小的 $a_i,b_i,-a_i,a_i - b_i,b_i - a_i$ 即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF524F"><a href="#CF524F" class="headerlink" title="CF524F"></a>CF524F</h3><p><a href="https://www.luogu.com.cn/problem/CF524F">题目链接</a></p>
<p>设 $cnt0,cnt1$ 为删掉原括号串的所以合法括号子序列后的 $($ 和 $)$ 的个数，显然最少添加 $|cnt0-cnt1|$ 个括号。考虑操作 $2$，就是要求一个字典序最小的循环同构，使得这个循环同构也只需要 $|cnt0-cnt1|$ 个括号，先不管原串中所有没匹配的字符，这个循环同构的起点一定是原串某个合法括号子段的开头，枚举这个位置，再看看这样循环移位后原来没匹配的那些字符还需要添加多少个，若为 $|cnt0-cnt1|$，那么这个位置就是可能可行的。</p>
<p>考虑所有可行的位置，要找到字典序最小那个，就把原串复制一遍接到后面，然后后缀排序即可。使用 SA 常数较大，可能无法通过，使用 SAM 可以做到 $\Theta(n)$。</p>
<p>复杂度 $\Theta(n)$ 或 $\Theta(n\log n)$。</p>
<h3 id="CF625E"><a href="#CF625E" class="headerlink" title="CF625E"></a>CF625E</h3><p><a href="https://www.luogu.com.cn/problem/CF625E">题目链接</a></p>
<p>按照位置排序后显然每个没被删掉的人相对位置不会改变，可以用链表维护这个相对位置。然后每个人先删的肯定是它下一个人，那就对每个人维护删掉它后一个人至少需要多少轮，把它放进一个小根堆里面，每次取出堆顶的人，记录时间 $t$，从它开始一直往后删，直到需要的时间大于 $t$ 停止，记录被删的人数。每次把所有 $t$ 相同的人拿出来，这样更新后，更新它们的速度，并且记录每个人上次更新速度的时间（用现在的时间减去上次更新的时间乘上速度就是当前的位置）。然后再对这一轮 $t$ 相等的人找到它们上一个人和下一个人，更新删掉它或删掉其他人的时间，继续放到堆里面。模拟这个过程即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF671D"><a href="#CF671D" class="headerlink" title="CF671D"></a>CF671D</h3><p><a href="https://www.luogu.com.cn/problem/CF671D">题目链接</a></p>
<p>考虑权值都是 $1$ 怎么做，显然从深的往浅的遍历每条边，如果遇到一条边没被覆盖，就找到能覆盖到这条边的且 $y$ 最浅的那条边选择。</p>
<p>考虑权值任意，此时依然从深往浅做，并且每次取权值最小的那条路径。当然，直接这样是显然错误的，因为权值小的路径深度可能不如权值大的浅。那么就可以考虑一个反悔贪心的过程，每次依然贪心地选择权值最小的，并且把 $x$ 在这个权值最小的路径的 $x$ 下方或等于它的所有路径的 $x$ 设为这条路径的 $y$，把它们的权值减去当前选的这条路径。</p>
<p>实现可以考虑从下往上合并，并且记录还能往上覆盖几条边和下方的所有没被选的且 $y$ 在这个点上方的路径，还要支持单点修改和整体减。可以考虑线段树合并或平衡树来维护这个东西。复杂度 $\Theta(n\log n)$ 或 $\Theta(n\log^2 n)$。</p>
<h3 id="CF797F"><a href="#CF797F" class="headerlink" title="CF797F"></a>CF797F</h3><p><a href="https://www.luogu.com.cn/problem/CF797F">题目链接</a></p>
<p>注意到把老鼠和洞按照编号排序，每个洞进的老鼠一定是一段连续的区间，设 $dp_{i,j}$ 表示前 $i$ 个洞进了前 $j$ 个老鼠，设 $sum_{i,j}$ 为洞 $i$ 到前 $j$ 个老鼠的距离和，转移有 $dp_{i,j} &#x3D; \max\limits_{k&#x3D;\max(0,j-c_i)}^{j} dp_{i-1,k}+sum_i - sum_k$，显然可以单调队列优化。</p>
<p>复杂度 $\Theta(nm)$。</p>
<h3 id="CF935F"><a href="#CF935F" class="headerlink" title="CF935F"></a>CF935F</h3><p><a href="https://www.luogu.com.cn/problem/CF935F">题目链接</a></p>
<p>这里设 $a_i$ 为原来的 $a_i - a_{i-1}$，那么 $f(a)&#x3D;\sum\limits_{i&#x3D;2}^n |a_i|$。</p>
<p>考虑操作 $1$，特判边界。即在 $a_l$ 到 $a_r$ 中选一个 $a_i \leftarrow a_i + x,a_{i+1} \leftarrow a_{i+1} -x$。讨论一下有哪些情况，设 $ans$ 为选择一个位置加上 $x$ 后和原序列答案的差。</p>
<ul>
<li>$r-l+1\le 3$，直接暴力跑一下</li>
<li>$\exist i,a_i \ge 0,a_{i+1} \le 0$，则 $ans&#x3D;2x$，是最优的情况。</li>
<li>$\exist i,a_i \ge 0,a_{i+1} \ge 0$，可以发现 $ans$ 总非负。<ul>
<li>$a_{i+1} \le x$，则 $ans &#x3D; 2(x-a_{i+1}) $。</li>
<li>$a_{i+1} \ge x$，则 $ans&#x3D;0$。</li>
</ul>
</li>
<li>$\exist i,a_i \le 0,a_{i+1}\le 0$，可以发现 $ans$ 总非负。<ul>
<li>$a_{i} \ge -x$，则 $ans &#x3D; 2(x+a_i)$。</li>
<li>$a_{i} \le -x$，则 $ans&#x3D;0$。</li>
</ul>
</li>
<li>$\exist i,a_i \le 0,a_{i+1} \ge 0$，可以发现只要 $a_i \le -x \lor a_{i+1} \ge x$，那么 $ans$ 一定非正，所以只用考虑 $a_i \ge -x \land a_{i+1}\le x$，此时 $ans&#x3D;2x + 2(a_i - a_{i+1})$。</li>
</ul>
<p>综上，当长度大于 $3$ 时，必定出现正负或正正或负负，$ans$ 一定非负，只需要维护所有满足条件的 $-a_{i+1},a_i,a_i - a_{i+1}$ 的最大值即可，用线段树维护，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1051G"><a href="#CF1051G" class="headerlink" title="CF1051G"></a>CF1051G</h3><p><a href="https://www.luogu.com.cn/problem/CF1051G">题目链接</a></p>
<p>考虑单个序列怎么做，因为把一个数变少可以得到 $-b_i$ 的价值，那先尽可能地减少一定是不劣的。如果有若干个相同的 $a_i$，那么肯定是最后让 $b$ 最小的 $a$ 最大，$b$ 最大的 $a$ 最小，这是容易的。但是整个序列有可能不能都变成同一种值，会分成若干段，每个极长段的形成是先把小的数变大，形成一个区间，被这个区间包含的数继续拓展这个区间，直到不能拓展为止。统计的话是容易的。</p>
<p>考虑对每个前缀求答案，那可以维护前面的若干值域连续段，显然加一个数最多添加一个段，有可能合并两个段。一个段内肯定是先把所有数变成这个段里的最小值，然后把它们的 $b$ 排序，代价就是 $-\sum\limits_i (a_i -minx)b_i+\sum\limits_i b_i(len-rk_i)$ 即 $-\sum\limits_{i} (a_i - minx+rk_i)b_i+len\sum\limits_i b_i$。$rk_i$ 的处理可以用线段树合并来做。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1137E"><a href="#CF1137E" class="headerlink" title="CF1137E"></a>CF1137E</h3><p><a href="https://www.luogu.com.cn/problem/CF1137E">题目链接</a></p>
<p>显然只用管每次插入的第一个数，且每次进行操作 $1$ 之后只用考虑第一段的第一个数。当进行操作 $2$ 的时候，会暂时性地使最小值变成最后一段的第一个，但是这个影响会随操作 $3$ 而逐渐消去，因为最后一段的下标大。</p>
<p>考虑维护一个不增的结构，对于相邻的两个下标 $(x,y)$，每次进行操作 $3$ 会使 $a_x - a_y$ 减少 $s(y-x)$，而 $x,y$ 是固定的（因为操作 $1$ 之后会把整个结构清空），所以记录 $t_x &#x3D; \lceil \dfrac{a_x - a_y}{y-x} \rceil$ 表示 $s$ 至少为 $t_x$ 时 $a_x$ 会比 $a_y$ 小。用链表+小根堆维护这个结构，每次往后插入后在链表最后插入一个 $0$，并把倒数两个的 $t_x$ 插入到堆里面。每次进行操作 $3$ 时看看堆顶是否已经足够了，就将其删除。操作 $1$ 直接情况即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1238G"><a href="#CF1238G" class="headerlink" title="CF1238G"></a>CF1238G</h3><p><a href="https://www.luogu.com.cn/problem/CF1238G">题目链接</a></p>
<p>考虑将所有人按照时间排序，到时间 $i$ 时先把能买的都买了，先不付款，每次从 $lst$ 走到时间 $i$ 时，取前 $i-lst$ 小的付款。但是会有容量限制，不能无限制地买，那么买 $i$ 时如果已经满了，可以把前面还没用到的价格比 $i$ 大的取消购买，反悔贪心。注意到每次从一个人走到下一个人要么只买以前一个人的，要么就至少买空一个人，所以一共只会买 $\Theta(n)$ 段相同的。用堆维护价格最小值和最大值，并用一个数组记录每个人能用的有多少即可。复杂度 $\Theta(n \log n)$​。</p>
<h3 id="CF1446D2"><a href="#CF1446D2" class="headerlink" title="CF1446D2"></a>CF1446D2</h3><p><a href="https://www.luogu.com.cn/problem/CF1446D2">题目链接</a></p>
<p>注意到所有极长的拥有 $2$ 个以上众数的段一定以全局众数为众数之一。证明：若全局众数不为其众数，可以拓展左右端点直到全局众数的出现次数等于其众数的出现次数。那么如果全局众数有不止 $1$ 个，答案即为 $n$，否则设其为 $x$。考虑答案子区间的众数出现次数 $cnt$。</p>
<ul>
<li>若 $cnt&gt;B$，只用考虑所有出现次数 $&gt;B$ 的数，有 $\Theta(\dfrac{n}{B})$ 个，考虑枚举这些数 $i$，把 $x$ 设为 $1$，$i$ 设为 $-1$，找到一个极长的段使得和等于 $0$ 即可，用一个桶记录前缀和第一次出现位置，复杂度 $\Theta(\dfrac{n^2}{B})$。</li>
<li>若 $cnt \le B$，考虑枚举这个出现次数 $i$。从左往右枚举答案的右端点 $r$，双指针记录 $x$ 出现次数为 $i$ 的合法做端点 $l$ 的区间，对于其他数也这样做，最小的 $l$ 就是所有其他数的 $l$ 区间和 $x$ 的 $l$ 区间交的最小值。复杂度 $\Theta(nB)$。</li>
</ul>
<p>复杂度 $\Theta(n\sqrt{n})$。</p>
<h3 id="CF1469F"><a href="#CF1469F" class="headerlink" title="CF1469F"></a>CF1469F</h3><p><a href="https://www.luogu.com.cn/problem/CF1469F">题目链接</a></p>
<p>考虑二分答案，然后按长度从大到小排序，依次从浅到深加入，每次加入一条链时尽量把连接点放到中心。每次连接中心是显然的，因为让 $\le mid$ 的白点尽可能浅来接其他链。从大到小加入是因为每次链接的上面那个白点的深度是单调不降的，所以肯定让深度浅的时候能贡献更多，如果在深一点的地方接大的就会造成浪费了。差分维护一下即可，复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1503D"><a href="#CF1503D" class="headerlink" title="CF1503D"></a>CF1503D</h3><p><a href="https://www.luogu.com.cn/problem/CF1503D">题目链接</a></p>
<p>考虑无解的必要条件，若存在 $a_i,b_i \le n$，那么必定存在一个 $a_j,b_j &gt; n$，显然无解。那么有解必然对于所有的 $i$ 使得 $a_i \le n,b_i &gt; n$ 或 $a_i &gt; n,b_i \le n$。</p>
<p>设 $i \in [1,n]$ 对应的另一边（比它大的数）是 $f(i)$，那么答案就是若干个 $i$ 升序排列，其对应的 $f(i)$ 降序，然后接上 $f(i)$ 升序，$i$ 降序。其中前面那段的 $i$ 在反面的贡献为 $1$，后面那段的 $i$ 在正面贡献为 $1$。那么按照 $i$ 排序，就是要让 $f(i)$ 分成两个下降子序列。</p>
<p>考虑判断是否有解，贪心地将新的 $f(i)$​ 加入前面两个下降子序列中最后一个数较小的且大于它的那个子序列中，但这样可能并不是最优解。</p>
<p>考虑什么时候一个数可以加入前面两个序列，结论：$\min\limits_{j&#x3D;1}^i a_j &gt; \max\limits_{j&#x3D;i+1}^n a_j$ 时，会有多种方案，这是显然的。那么考虑按照这个把原序列分段，每段有唯一分组方案，只是不知道哪个是前面的一段，哪个是后面的一段，显然讨论一下取最小即可。复杂度 $\Theta(n)$。</p>
<h3 id="CF1539F"><a href="#CF1539F" class="headerlink" title="CF1539F"></a>CF1539F</h3><p><a href="https://www.luogu.com.cn/problem/CF1539F">题目链接</a></p>
<p>考虑中位数的经典套路，假设当前在求 $x$ 的答案，先假设当前区间中只有一个 $x$，把 $&lt;x$ 的数看成 $1$，$&gt;x$ 的数看成 $-1$，把 $x$ 看成 $0$ 那么 $x$ 的距离就是这个区间的和除以 $2$ 向下取整<strong>的绝对值</strong>。那么如果有多个 $x$，把一个 $x$ 看成 $0$，把其他的全看成 $1$ 或者 $-1$ 一定是最优的。因为考虑只有一个 $x$ 时，若 $x$ 排序后在中位数左边，加入一个 $x$ 会使中位数位置往右移动，最左边那个 $x$ 一定是最远的，$x$ 在右边时同理，最右边肯定是最远的。</p>
<p>考虑扫描值域，用线段树维护前缀和，每次修改一个后缀，询问 $i$ 时先把所有 $a_j &#x3D; a_i$ 的 $j$ 修改为 $1$ 和 $-1$ 都做一遍，询问 $i$ 右边最大值减去左边最小值，和右边最小值减去左边最大值（因为有负数的情况）取最大即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1566F"><a href="#CF1566F" class="headerlink" title="CF1566F"></a>CF1566F</h3><p><a href="https://www.luogu.com.cn/problem/CF1566F">题目链接</a></p>
<p>首先把所有已经包含点的区间扔掉，那么现在就剩一堆点然后一堆区间然后一堆点这样子。考虑每个点是怎么走的，可以先往左边走再回来再往右边，也可以先往右边再回来再往左边，也可以直往一个方向走。考虑两个相邻的点之间的区间，显然这些区间只可能被这两个点其中一个走，将它们按照左端点排序，左边那个点走的就是一个前缀的左端点最大值，右边的点走的就是后缀的右端点最小值。</p>
<p>设 $dp_{i,0&#x2F;1}$ 表示做完前 $i$ 个点，其中第 $i$ 个点是不是先往右走（或者不往右走）。转移的话直接枚举上个点走到那个前缀，算一下后缀 $\min$ 即可，$dp_{i,1}$ 的话要来回走，所以注意贡献要加两次。复杂度 $\Theta(n\log n)$，在于排序。</p>
<h3 id="CF1601D"><a href="#CF1601D" class="headerlink" title="CF1601D"></a>CF1601D</h3><p><a href="https://www.luogu.com.cn/problem/CF1601D">题目链接</a></p>
<p>有个朴素的想法是全部按 $a_i$ 排序，先取 $a$ 小的，但是发现这样是错误的，因为有些是 $s_i &lt; a_i$ 的可以先取，然后还有 $s_j \ge a_j$ 的后取，而 $s_i &lt; a_j \le a_i \le s_j$。那么可以尝试将人分成两类，$s_i &lt; a_i$ 的和 $s_i \ge a_i$ 的。</p>
<p>还是根据刚刚的想法，设 $f_i$ 为当前高度为 $a_i$ 时的答案，把人按照 $a_i$ 排序。特殊地，对于 $s_i &lt; a_i$ 的人的 $f_i$，除了 $a_j \le s_i$ 的 $f_j$ 的最大值的贡献，还有 $s_i &lt; a_k \le a_i \le s_k$ 的所有 $k$ 的贡献，那么只要算出有多少个 $k$ 就行，二维数点 bit 维护。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1601E"><a href="#CF1601E" class="headerlink" title="CF1601E"></a>CF1601E</h3><p><a href="https://www.luogu.com.cn/problem/CF1601E">题目链接</a></p>
<p>考虑单次询问，从 $l$ 开始，在 $l,l+k,l+2k\cdots$ 位置都买一张 $[l,l+jk]$ 的最小值即可。</p>
<p>考虑多次询问，把所有 $l \operatorname{mod} k$ 同余的 $l$ 一起做，从后往前扫描线。维护所有 $p \operatorname{mod} k &#x3D; i$ 的所有位置的答案，当扫描到 $l$ 的时候，$ans_l$ 设为 $a_l$，然后找到 $cur&#x3D;\min\limits_{j&#x3D;l}^{l+k-1} a_j$，把 $l+k,l+2k,l+jk$ 的所有大于 $cur$ 的  $ans$ 换成 $cur$ 即可，单调栈维护。查询 $l$ 对应的 $r$ 时找到最大的 $j$ 使得 $l+jk\le r$，把 $[l,l+jk]$ 的所有关键点的 $ans$ 加起来即可。复杂度 $\Theta(n\log n)$，在于 st 表。</p>
<h3 id="CF1621F"><a href="#CF1621F" class="headerlink" title="CF1621F"></a>CF1621F</h3><p><a href="https://www.luogu.com.cn/problem/CF1621F">题目链接</a></p>
<p>先把连续两个 $0$ 和 $1$ 的个数找出来，分别是 $x,y$。然后分讨一下，记 $cnt_0,cnt_1$ 为总 $0,1$ 的个数。</p>
<ul>
<li>$x&lt;y$</li>
</ul>
<p>显然操作序列肯定是形如 $2121\cdots21(232323)2$，括号处取到当且仅当 $b&gt;c$。当取完连续两个 $0$ 后序列一定长成若干个 $1$ 连着一个 $0$ 再有若干个 $1$，那就把首位的 $0$ 去掉剩下 $t$ 个 $0$，那么当 $b&gt;c$ 时显然可以把这 $t$ 个 $0$ 都删掉，此时剩下的 $y$ 不会变，还会剩下首位的 $0$ 能取就取就行。所以答案是 $x \times (a+b) + \max(0,b-c) \times (t+\min(y-x-1,cnt_0 - t)) + b$。</p>
<ul>
<li>$x\ge y$</li>
</ul>
<p>操作序列是形如 $1212\cdots 12(323232)[1]$，小括号取到当且仅当 $b&gt;c$，中括号取到当且仅当 $x&gt;y$。考虑小括号中最多取到多少个 $32$，那把相邻两个 $1$ 中间的 $0$ 个数统计出来，去掉 $0$ 的，把剩下的排序。在前 $y$ 次 $12$ 操作中可以尽量把中间连续的 $0$ 变成一个 $0$，即设连续长度为 $cnt_1 \le cnt_2\le \cdots \le cnt_k$，从头开始取 $cnt_i - 1$ 贪心能取就取即可，设最多把 $t$ 个 $cnt_1$ 变成 $1$，答案即 $y \times (a+b) + \max(0,b-c) \times t + [x&gt;y]a$。</p>
<p>复杂度 $\Theta(n\log n)$​，在于排序。</p>
<h3 id="CF1635F"><a href="#CF1635F" class="headerlink" title="CF1635F"></a>CF1635F</h3><p><a href="https://www.luogu.com.cn/problem/CF1635F">题目链接</a></p>
<p>设 $L_i$ 为 $i$ 左边最大的 $j$ 使得 $w_j \le w_i$，$R_i$ 为 $i$ 右边最小的 $j$ 使得 $w_j \le w_i$。那么答案一定是 $(i,L_i),(i,R_i)$ 的形式。证明：设答案为 $(i,j),i \neq L_j$，那么 $x_i &lt; x_{L_j} &lt;x_j,w_i + w_{L_j} \le w_i + w_j$，因此 $(i,L_j)$ 更优。右边的情况同理。预处理这些点对，二维数点即可。复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1672H"><a href="#CF1672H" class="headerlink" title="CF1672H"></a>CF1672H</h3><p><a href="https://www.luogu.com.cn/problem/CF1672H">题目链接</a></p>
<p>设 $00$ 个数 $x$ 和 $11$ 个数 $y$，每次删除一个区间，若为 $0(10101010)1$ 或 $1(01010101)0$ 则 $x,y$ 减 $1$，若 $1(01010)1$ 或 $0(1010101)0$，则 $x$ 或 $y$ 减 $1$。显然第一种更优，答案就是 $\max(x,y)+1$，前缀和即可。复杂度 $\Theta(n)$。</p>
<h3 id="CF1699E"><a href="#CF1699E" class="headerlink" title="CF1699E"></a>CF1699E</h3><p><a href="https://www.luogu.com.cn/problem/CF1699E">题目链接</a></p>
<p>考虑扫描最小值 $l$，对每个数去看它拆开后最大值最能到多少。贪心是错误的，那么考虑 dp，设 $dp_{i,j}$ 为最小值为 $i$ 时 $j$ 能分到最大值最小是多少，从大到小转移，$dp_{i,j} &#x3D; \max(dp_{i+1,j},dp_{i,\frac{j}{i}})$，后面那个转移当且仅当 $i|j$ 且 $j\ge i^2$ 时成立，所以只有 $i$ 的倍数会改变，那么直接转移是 $\Theta(m\log m)$ 的。考虑求答案，$ans &#x3D; \min\limits_i(\max(dp_{i,j}) - i)$，注意到 $j$ 相同是 $dp_{i,j}$ 随 $i$ 降低是单调不增的，所以可以用个桶记录值用个指针扫就行。复杂度 $\Theta(m \log m)$。</p>
<h3 id="CF1793E"><a href="#CF1793E" class="headerlink" title="CF1793E"></a>CF1793E</h3><p><a href="https://www.luogu.com.cn/problem/CF1793E">题目链接</a></p>
<p>显然肯定是 $a$ 最小的几个符合要求，因为如果有 $x&lt;y$ 且 $x$ 没满足 $y$ 满足了，交换 $x,y$ 肯定更优。那考虑二分答案，要让前 $mid$ 个符合要求，后面 $n-mid$ 都去读没人读的书了，这时有两种情况。</p>
<ul>
<li>$n-mid \ge k$，此时所有书都有人读，那么前 $mid$ 个人读一本书就行了，而且这本书还有后 $n-mid$ 个人中的 $n-mid-k+1$ 个人读，所以只要 $n-mid-k+1+mid\ge a_{mid}$ 即可。</li>
<li>$n-mid&lt;k$ 此时还有 $k-n+mid$ 个书要读，设 $f_i$ 为前 $i$ 个人都满足要求最多读几本书，显然 $f_i &#x3D; \max\limits_{j\le i-a_i} f_j + 1$。所以只要 $f_{mid} \ge k - n +mid$ 即可。</li>
</ul>
<p>复杂度 $\Theta(n+q\log n)$​。</p>
<h3 id="CF1720E"><a href="#CF1720E" class="headerlink" title="CF1720E"></a>CF1720E</h3><p><a href="https://www.luogu.com.cn/problem/CF1720E">题目链接</a></p>
<p>设一开始有 $m$ 个颜色。</p>
<ul>
<li>$m&lt;k$，显然答案等于 $k-m$。</li>
<li>$m&gt;k$，下面证明答案不超过 $2$。<ul>
<li>第一个矩阵以 $(1,1)$ 开头拓展，把这个矩阵变成一个已有的颜色，拓展到最大的 $(t,t)$ 使得 $m’\ge k$。</li>
<li>若 $m’&gt;k$，第二个矩阵从 $(t+1,t+1)$ 往左上拓展，变成和第一个矩阵一样的颜色，每次覆盖 $2$ 个，所以最多使 $m’$ 减 $2$。</li>
<li>若最终的 $m’&#x3D;k-1$，那么把第二个矩阵的颜色变成一个没出现的颜色即可。</li>
<li>判断答案等于 $1$：可以先枚举长度 $len$，然后对于每种颜色，算出它的最小、最大的 $x,y$，显然符合要求的左上角是一个矩阵，差分一下就行。</li>
</ul>
</li>
</ul>
<p>复杂度 $\Theta(n^3)$​。</p>
<h3 id="CF1844F1"><a href="#CF1844F1" class="headerlink" title="CF1844F1"></a>CF1844F1</h3><p><a href="https://www.luogu.com.cn/problem/CF1844F1">题目链接</a></p>
<p>注意到 $c\ge 0$ 时从小到大一定是最优解，$c&lt;0$ 时从大到小是最优解，但是字典序不一定最小。那就从前往后考虑每一个 $a_i$，枚举后面的 $a_j$ 看看能否把 $a_j$ 放到 $a_i$ 前面，令 $f(x)&#x3D;|x-c|$，只需判断 $f(a_j - a_{j - 1}) + f(a_{j+1} - a_j) + f(a_i - b_{i-1})-f(a_{j+1} - a_{j-1})-f(a_j - b_{i-1})-f(a_i - a_j)&#x3D;0$ 即可，$b_{i-1}$ 是已经确定的位置。复杂度 $\Theta(n^2)$。</p>
<p>F2 的结论没看懂&#x2F;kk</p>
<h3 id="CF1893D"><a href="#CF1893D" class="headerlink" title="CF1893D"></a>CF1893D</h3><p><a href="https://www.luogu.com.cn/problem/CF1893D">题目链接</a></p>
<p>考虑对于一个单独的 $(s,d)$ 应该怎么填，肯定是以长度 $d$ 为一个区间，每个区间的数都不相同。</p>
<p>贪心地，考虑先满足 $d$ 大的 $(s_i,d_i)$，然后先用数量最多的 $d$ 个颜色，先放 $d$ 个，然后再重新取当前数量最多的 $d$ 个颜色再放，重复这个过程。先用最多的原因是若用了数量少的，那么那个颜色可能以后就不能用，我们肯定希望当前可用的颜色种类越多越好。考虑模拟这个过程，先把所有颜色放到大根堆里面，然后每次就取出堆顶的 $d$ 个弹出，然后把它们的个数减 $1$ 塞回去，再重新取 $d$ 个即可。</p>
<p>复杂度 $\Theta(n\log n)$。</p>
<h3 id="CF1919F2"><a href="#CF1919F2" class="headerlink" title="CF1919F2"></a>CF1919F2</h3><p><a href="https://www.luogu.com.cn/problem/CF1919F2">题目链接</a></p>
<p>考虑将水看成流，其实就是一个网络流模型，$s\to i,a_i$ 和 $i\to t,b_i$ 和 $i\to i+1,c_i$。单点修改问最大流，显然可以贪心流，能流到 $t$ 就流到 $t$。</p>
<p>考虑两个区间怎么合并，需要知道什么。可以维护区间的几个信息：从这个区间流到右边的流大小，这个区间剩余的 $b_i$ 之和，从左边能流入最大的流使得不能再流了，还有答案分别记为 $out,rem,in,ans$。合并的时候，$ans&#x3D;ans_1 + ans_2 + \min(c_{r_1},out_1,in_2,rem_2)$，$in&#x3D;\min(in_1,rem_1+c_{r_1}-\min(out,c_{r+1}),rem_1+in_2-\min(c_{r_1},out_1,in_2))$，$out&#x3D;\max(0,\min(c_{r_1},out_1,in_2)-rem_{2})+out_2$。线段树维护即可，单点修改，全局查询。</p>
<p>复杂度 $\Theta(n\log n)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%80%8D%E5%A2%9E%E5%88%86%E5%9D%97/</url>
    <content><![CDATA[<p>倍增分块常用于处理数值递减&#x2F;递增的问题，形如当 $a_i \ge x$ 时，使 $a_i \leftarrow a_i - x$。</p>
<p>分成 $[2^k,2^{k+1})$ 的若干块。</p>
<h4 id="P4587"><a href="#P4587" class="headerlink" title="P4587"></a>P4587</h4><p><a href="https://www.luogu.com.cn/problem/P4587">题目链接</a></p>
<p>暴力就是排个序，然后便利值域，依次加入。加入完 $i$ 时，遍历到值域第一个不能被组成的位置 $x$，$[1,x)$ 的数都是可以被已经加入的数组成的，所以 $a_{i+1}$ 一定不能大于 $x$。一旦大于 $x$，$x$ 这个位置就不能被表示了。那么 $a_{i+1} \le x$，加入 $a_{i+1}$ 会使得下一个不能被组成的位置是 $x+a_{i+1}$。找到第一个不行的就行。</p>
<p>考虑优化这个过程，注意到 $x$ 是单增的，所以用倍增分块。设当前在 $x \in [2^k,2^{k+1})$，那么要往后加数，下一个数必然不能大于 $x$。所以可以查询 $[2^k,2^{k+1})$ 的最小值，如果最小值小于等于 $x$，那么由于最小值 $a_i \ge 2^k,x \ge 2^k$，所以 $x+a_i \ge 2^{k+1}$，那么这一块的所有数必定可以取走，所以就取走 $[2^k,2^{k+1})$ 所有数加到 $x$ 里面。每个块预处理用个 st 表就行，复杂度 $\Theta(n (\log n+ \log V))$。</p>
<h4 id="CF1515I"><a href="#CF1515I" class="headerlink" title="CF1515I"></a>CF1515I</h4><p>出现了形如 $c \ge w_i$，$c \leftarrow c-w_i$。考虑按要求排序，然后模拟这个过程，发现有时候会遇到一个比 $c$ 大的数取不了跳过，很难受。那么可以考虑特殊处理这些，设当前 $c \in [2^k,2^{k+1})$，那么只要取到一个在 $[2^k,2^{k+1})$ 的数必然就会降级为至多 $[2^{k-1},2^k)$。所以关注那些 $&lt;2^k$ 的数，如果这个都取到某个数都不能取了，那么那时候肯定是 $c&lt;2^k$。</p>
<p>那么该怎么找到这样一个数呢，考虑在线段树上维护所有 $&lt;2^k$ 的重量和 $sum_k$，那么可以线段树二分找到第一个 $sum_k &gt;c$ 的位置，这是第二种情况。再考虑第一种，显然 $c$ 要大于这个 $\ge 2^k$ 的重量和之前所有 $&lt;2^k$ 的重量和，设这两者的和是 $t$，那么 $c$ 还得小于之前所有 $\ge 2^k$ 物品的那些 $t$ 值，可以用线段树二分求出。</p>
<p>所以每次 $\log n$，做最多 $\log V$ 次，复杂度单次是 $\Theta(n\log n\log V)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%A7%E8%B4%A8/</url>
    <content><![CDATA[<p>总结一下，方便以后复习。</p>
<p>只有结论，没有证明。</p>
<h3 id="基本斐波那契数列"><a href="#基本斐波那契数列" class="headerlink" title="基本斐波那契数列"></a>基本斐波那契数列</h3><p>根据定义得：</p>
<p>$f_1 &#x3D; 1, f_2 &#x3D; 1, f_n &#x3D; f_{n-1} + f_{n-2}(n&gt;2)$</p>
<p>$f_n &#x3D; (\sum\limits_{i&#x3D;1}^{n-2}f_i)+ f_2$</p>
<p>$f_n &#x3D; \dfrac{(\frac{1+\sqrt{5}}{2})^n - (\frac{1-\sqrt{5}}{2})^n}{\sqrt{5}}$</p>
<p>$f_{n +m} &#x3D; f_n \cdot f_{m+1} + f_{n-1} \cdot f_m$</p>
<h3 id="广义斐波那契数列"><a href="#广义斐波那契数列" class="headerlink" title="广义斐波那契数列"></a>广义斐波那契数列</h3><p>定义：$F_1 &#x3D; x,F_2 &#x3D; y, F_n &#x3D; F_{n-1} + F_{n-2} (n&gt;2)$</p>
<p>$F_n &#x3D; (\sum\limits_{i&#x3D;1}^{n-2}F_i)+ F_2(n&gt;2)$</p>
<p>$F_n &#x3D; x \cdot f_{n-2} +  y\cdot f_{n-1}$</p>
<p>设广义斐波那契数列 $G_n$ 且 $G_1 &#x3D; x’,G_2&#x3D;y’$，且 $H &#x3D; F + G$，那么 $H$ 也是一个广义斐波那契数列，且 $H_1 &#x3D; x + x’, H_2 &#x3D; y+y’$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E6%80%A7%E4%BC%98%E5%8C%96%20dp/</url>
    <content><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>定义：形如 $f_{i,j}&#x3D; \min\limits_{k&lt;i}f_{k,j-1}+ w(k+1,i)$。</p>
<p>条件：$w(i,j)$ 满足四边形不等式，即 $\forall a\le b\le c \le d,w(a,c)+w(b,d)\le w(a,d) +w(b,c)$（如果是 $\max$ 就是 $\ge$）。</p>
<p>结论：定义 $i$ 的决策点 $pos_i$，则 $\forall i\le j,pos_i \le pos_j$。</p>
<p>实现：</p>
<ol>
<li>离线算法：分治</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">furina</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll minx = <span class="number">1e18</span>, id = <span class="number">0</span>;</span><br><span class="line">    _req(i, <span class="built_in">min</span>(mid - <span class="number">1</span>, R), L)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!id || <span class="built_in">w</span>(i, mid) &lt; minx)&#123;</span><br><span class="line">            minx = <span class="built_in">w</span>(i, mid), id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[t][mid] = minx; </span><br><span class="line">    <span class="built_in">furina</span>(l, mid - <span class="number">1</span>, L, id, t), <span class="built_in">furina</span>(mid + <span class="number">1</span>, r, id, R, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>单调队列</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;<span class="keyword">return</span> <span class="number">1.00</span> * a[x] + <span class="built_in">sqrt</span>((<span class="type">double</span>)y - x);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">love</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1ll</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">calc</span>(x, mid) - <span class="built_in">calc</span>(y, mid) &gt; eps) r = mid - <span class="number">1</span>, res = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, l, r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">furino</span><span class="params">()</span></span>&#123;</span><br><span class="line">    deque&lt;node&gt; q;</span><br><span class="line">    _rep(i, <span class="number">1</span>, n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">front</span>().r &lt; i) q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(<span class="number">0</span>, a[q.<span class="built_in">front</span>().x] + sqr[i - q.<span class="built_in">front</span>().x]);</span><br><span class="line">            <span class="keyword">while</span>(q.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">love</span>(q.<span class="built_in">back</span>().l, q.<span class="built_in">back</span>().r, i, q.<span class="built_in">back</span>().x) == q.<span class="built_in">back</span>().l) q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">love</span>(q.<span class="built_in">back</span>().l, q.<span class="built_in">back</span>().r, i, q.<span class="built_in">back</span>().x);</span><br><span class="line">            node u = q.<span class="built_in">back</span>(); q.<span class="built_in">pop_back</span>(); u.r = t - <span class="number">1</span>; q.<span class="built_in">push_back</span>(u);</span><br><span class="line">            <span class="keyword">if</span>(t &lt; n) q.<span class="built_in">push_back</span>(&#123;i, t, n&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> q.<span class="built_in">push_back</span>(&#123;i, <span class="number">1</span>, n&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.luogu.com.cn/training/425471">题单</a></p>
<h3 id="好文收藏"><a href="#好文收藏" class="headerlink" title="好文收藏"></a>好文收藏</h3><p><a href="https://www.luogu.com.cn/blog/command-block/dp-di-jue-ce-dan-diao-xing-you-hua-zong-jie">cmd</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%8F%8D%E5%B0%84%E5%AE%B9%E6%96%A5/</url>
    <content><![CDATA[<h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><h4 id="最平凡"><a href="#最平凡" class="headerlink" title="最平凡"></a>最平凡</h4><p>考虑平凡的网格图计数，从 $(0,0)$ 往右或往上走，走到 $(n,m)$ 方案数为 $\binom{n+m}{n}$。</p>
<h4 id="较平凡"><a href="#较平凡" class="headerlink" title="较平凡"></a>较平凡</h4><p>若不经过直线 $y &#x3D; x+b$，直接在第一次经过这个直线的地方翻折，如下图。</p>
<p><img src="/./img/5tpli92l.png"></p>
<p>$A\to G\to C$ 翻转成 $A \to G \to I$，这些都是一一对应的。</p>
<p>方案就减去 $(0,0)\to (m-b,n+b)$ 的方案数 $\binom{n+m}{n}-\binom{m+n}{m-b}$。</p>
<h4 id="平凡"><a href="#平凡" class="headerlink" title="平凡"></a>平凡</h4><p>考虑不经过 $y&#x3D;x+b,y&#x3D;x+c$ 两条直线，设两条直线为 $B,C$。</p>
<p>把一条路径表示为依次穿过的路径，如 $BBCCB$，考虑到多次穿过一条直线只用保留一条，就变成 $BCBCBC,CBCBCB$。</p>
<p>直接开始容斥，$ans&#x3D;\empty -B-C+BC+CB-BCB-CBC+BCBC+CBCB…$。</p>
<p>可以分为 $BCBC$ 和 $CBCB$ 统计，每次穿过一条直线把目标点关于这条直线对称即可。</p>
<p>复杂度 $\Theta(\dfrac{n+m}{|b-c|})$。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="P3266"><a href="#P3266" class="headerlink" title="P3266"></a>P3266</h4><p><a href="https://www.luogu.com.cn/problem/P3266">题目链接</a></p>
<p>考虑每行 $a_{i,j}&lt;a_{i,j+1}$，且 $a_{i,j} \in [0,m],j\in [1,m]$，所以每行中有且仅有一个 $[0,m]$ 的数不出现。</p>
<p>$f_{i,j}$ 第 $i$ 行 $j$ 不出现方案数。</p>
<p>$f_{i,j} &#x3D; \sum\limits_{k&#x3D;0}^{j+1} f_{i-1,k}$</p>
<p>等价于 $f_{i,j}&#x3D;f_{i,j-1}+f_{i-1,j+1}$，答案为 $f_{n+1,m}$。</p>
<p>组合意义是从 $(1,0)$ 出发到 $(n+1,m)$，每次往右或往左上，当 $x&#x3D;1$ 时可以往上的方案数，转动 $45\degree$，发现是从 $(0,0)$ 走到 $(n+m+1,n)$ 且不经过 $y&#x3D;x+1,y&#x3D;x-m-2$ 的方案，按照上面的方法做就行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _rep(i, x, y) for(int i = x; i &lt;= y; ++i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _req(i, x, y) for(int i = x; i &gt;= y; --i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _rev(i, u) for(int i = head[u]; i; i = e[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(f, i) memset(f, i, sizeof f)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">    <span class="type">char</span> ibuf[<span class="number">50007</span>],*p1 = ibuf, *p2 = ibuf;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> get() p1 == p2 &amp;&amp; (p2 = (p1 = ibuf) + fread(ibuf, 1, 50007, stdin), p1 == p2) ? EOF : *p1++</span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> get() getchar()</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span>&#123;</span><br><span class="line">        T x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">            c = <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">        t = x * f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args&amp;... args)</span></span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">write</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), t = -t;</span><br><span class="line">        <span class="keyword">if</span>(t &gt;= <span class="number">10</span>) <span class="built_in">write</span>(t / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(t % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="type">void</span> <span class="title">write</span><span class="params">(T t, Args... args)</span></span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(t), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>), <span class="built_in">write</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">writeln</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(t);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">writes</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(t), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> get</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastio;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest() int T; read(T); _rep(tCase, 1, T)</span></span><br><span class="line"><span class="keyword">namespace</span> Calculation&#123;</span><br><span class="line">    <span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="function">ll <span class="title">ksm</span><span class="params">(ll p, ll h)</span></span>&#123;ll base = p % mod, res = <span class="number">1</span>; <span class="keyword">while</span>(h)&#123;<span class="keyword">if</span>(h &amp; <span class="number">1ll</span>) res = res * base % mod; base = base * base % mod, h &gt;&gt;= <span class="number">1ll</span>;&#125; <span class="keyword">return</span> res;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dec</span><span class="params">(ll &amp;x, ll y)</span></span>&#123;x = ((x - y) % mod + mod) % mod;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll &amp;x, ll y)</span></span>&#123;x = (x + y) % mod;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(ll &amp;x, ll y)</span></span>&#123;x = x * y % mod;&#125;</span><br><span class="line">    <span class="function">ll <span class="title">sub</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="keyword">return</span> ((x - y) % mod + mod) % mod;&#125;</span><br><span class="line">    <span class="function">ll <span class="title">pls</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="keyword">return</span> ((x + y) % mod + mod) % mod;&#125;</span><br><span class="line">    <span class="function">ll <span class="title">mult</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="keyword">return</span> x * y % mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Calculation;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e6</span> + <span class="number">5</span>;</span><br><span class="line">ll n, m, pw[N], inv[N];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == m || !m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> pw[n] * inv[m] % mod * inv[n - m] % mod;</span><br><span class="line">&#125;</span><br><span class="line">ll b, c, x, y;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">C</span>(x + y, x);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(ll &amp;x, ll &amp;y, ll b)</span></span>&#123;</span><br><span class="line">    ll tx = x, ty = y;</span><br><span class="line">    y = tx + b, x = ty - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(ll &amp;b, ll &amp;c)</span></span>&#123;</span><br><span class="line">    b = <span class="number">2</span> * c - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m), pw[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    _rep(i, <span class="number">2</span>, <span class="number">4e6</span>) pw[i] = pw[i - <span class="number">1</span>] * i % mod, inv[i] = (-mod / i + mod) * inv[mod % i] % mod;</span><br><span class="line">    _rep(i, <span class="number">2</span>, <span class="number">4e6</span>) inv[i] = inv[i - <span class="number">1</span>] * inv[i] % mod;</span><br><span class="line">    b = <span class="number">1</span>, c = -m - <span class="number">2</span>, x = n + m + <span class="number">1</span>, y = n;</span><br><span class="line">    ll ans = <span class="built_in">calc</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">work</span>(x, y, b), <span class="built_in">dec</span>(ans, <span class="built_in">calc</span>(x, y));</span><br><span class="line">            <span class="built_in">work</span>(c, b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">work</span>(x, y, c), <span class="built_in">add</span>(ans, <span class="built_in">calc</span>(x, y));</span><br><span class="line">            <span class="built_in">work</span>(b, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b = <span class="number">1</span>, c = -m - <span class="number">2</span>, x = n + m + <span class="number">1</span>, y = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">work</span>(x, y, c), <span class="built_in">dec</span>(ans, <span class="built_in">calc</span>(x, y));</span><br><span class="line">            <span class="built_in">work</span>(b, c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">work</span>(x, y, b), <span class="built_in">add</span>(ans, <span class="built_in">calc</span>(x, y));</span><br><span class="line">            <span class="built_in">work</span>(c, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GYM104053J"><a href="#GYM104053J" class="headerlink" title="GYM104053J"></a>GYM104053J</h4><p><a href="https://codeforces.com/gym/104053/problem/J">题目链接</a></p>
<p>$4s_i&#x3D;(a_i +1)^2$ 即 $4s_{i-1} &#x3D; (a_i-1)^2$，即 $a_i &#x3D; 1\pm 2\sqrt{s_{i-1}}$。</p>
<p>$s_i&#x3D;s_{i-1} -2\sqrt{s_{i-1}}+1&#x3D;(\sqrt{s_{i-1}} -1)^2$ 或 $s_i &#x3D; s_{i-1} + 2\sqrt{s_{i-1}}+1&#x3D;(\sqrt{s_{i-1}}+1)^2$。考虑二元组 $(i,\sqrt{s_i})$，可以走到 $(i,\sqrt{s_i}+1),(i,\sqrt{s_i}-1)$。</p>
<p>同样旋转一下，又因为 $|a_i|\le m$，所以转化为从 $(0,0)$ 出发，不经过直线 $y&#x3D;x+\dfrac{m+1}{2}+1,y&#x3D;x-1$，最后终点在 $y&#x3D;-x+n$ 上的方案。</p>
<p>可以直接枚举终点，复杂度 $\Theta(b-c)$，乘上容斥复杂度就是 $\Theta(n+m)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84SA/</url>
    <content><![CDATA[<h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>后缀数组(suffix array, 简称 <strong>SA</strong>)，是一种强有力的字符串处理算法</p>
<p>能在优良的时间复杂度下解决大部分字符串问题</p>
<p>其核心思想就如它的名字——<strong>将字符串每个后缀按字典序排序，并记录下它的编号和排名</strong></p>
<h2 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h2><p>在本篇文章中，字符串的下标一律从 $1$ 开始，长度为 $n$，即 $s[1…n]$</p>
<p>后缀数组主要涉及到 $2$ 个数组：</p>
<p>$sa[i]$ ： 表示 排名为 $i$ 的后缀 的编号</p>
<p>$rk[i]$ ： 表示 后缀 $i$ 的排名</p>
<p>其中，后缀 $i$ 表示从下标 $i$ 开始到字符串末尾的后缀字符串<br>$s[i…n]$</p>
<p>性质：$\forall 1 \le i \le n, sa[rk[i]] &#x3D; rk[sa[i]] &#x3D; i $</p>
<p>显然，这条性质是正确的</p>
<p>排名为【后缀 $i$ 的排名】的后缀是 $i$</p>
<p>【排名为 $i$ 的后缀】的排名是 $i$</p>
<p>图例：</p>
<p><img src="/./img/cujvm5tf.png"></p>
<h2 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h2><h3 id="暴力-O-n-2-log-n"><a href="#暴力-O-n-2-log-n" class="headerlink" title="暴力 $O(n^2\log n)$"></a>暴力 $O(n^2\log n)$</h3><p>最暴力的做法</p>
<p>对于每个后缀 $i$，截取它存下来</p>
<p>再 $sort$ 排序</p>
<p>空间复杂度 $O(n^2)$</p>
<p>排序 $O(n \log n)$，比较 $O(n)$</p>
<p>时间复杂度 $O(n^2\log n)$</p>
<p>暴力做法时空都会爆炸</p>
<h3 id="倍增-O-n-log-2n"><a href="#倍增-O-n-log-2n" class="headerlink" title="倍增 $O(n\log^2n)$"></a>倍增 $O(n\log^2n)$</h3><p>对于这种每个字串长度较大的问题，不妨试试使用倍增的思想</p>
<p>依次处理从 $i$ 开始长度为 $2^k$ 的子串 ($0 \le k \le \log_2{n}$)</p>
<p>就可以处理出 $rk[i][k]$ 与 $sa[i][k]$</p>
<ul>
<li><p>对于长度为 $1$ 的序列直接 $O(n\log n)$ 暴力排序即可</p>
</li>
<li><p>对于长度为 $2 ^ k$（$k &gt; 0$） 的序列可以从 $ k - 1$ 的部分转移过来</p>
</li>
</ul>
<p>那如何转移呢？ 回忆一下字典序比较</p>
<p>对于两个字符串 $s1$ 和 $s2$，从头开始枚举 $i$</p>
<p>若 $s1[i] &lt; s2[i]$ 则立刻返回 $s1 &lt; s2$，不用继续比较，反之同理</p>
<p>若 $s1[i] &#x3D; s2[i] (\forall i)$，那么这两个字符串的字典序相同</p>
<p>因为对于当前问题所有子串长度都为 $2^{k-1}$，所以就不考虑长度不同的了</p>
<p>回到本问题，现在已经知道了所有 $rk[i][k-1]$</p>
<p>那么显然对于 $rk[i][k]$ 可以通过 $rk[i][k-1]$ 和 $rk[i + 2^{k-1}][k-1]$ 转移</p>
<p>所以，可以将 $rk[i][k-1]$ 和 $rk[i+2^{k-1}][k-1]$ 作为第一、二关键字排序，便可以得到所有 $s[i…min(i+2^k-1,n)]$ 的排名。如果 $i + 2 ^ k - 1 &gt; n$，也就是说这个子串不是完整的，那么将它的第二关键字设为<strong>无限小（最小）</strong>，第一关键字和前面相同，延续上一次排序后的 $rk[i][k-1]$。然后，在<code>sort</code>一下即可</p>
<p>空间优化：因为每次只需 $k-1$，所以使用滚动数组，或用另一数组记录上一次求出的 $rk$ 即可;而每次的 $sa$ 都不会被用到，所以不用开第二维</p>
<p>复杂度倍增 $O(\log n)$，排序 $O(n\log n)$</p>
<p>所以复杂度为 $O(n\log^2n)$</p>
<p>代码就不放了，实现很简单，也不是主流做法。</p>
<p>对于 $n \ge 500000$ 时，就会爆炸了，所以还需要优化</p>
<p>图例：<br><img src="/./img/z0xlsneo.png"></p>
<h3 id="倍增-基数排序-O-n-log-n"><a href="#倍增-基数排序-O-n-log-n" class="headerlink" title="倍增+基数排序 $O(n\log n)$"></a>倍增+基数排序 $O(n\log n)$</h3><p>因为所有排名的值域不会超过 $n$，所以就可以使用基数排序代替<code>sort</code>达到复杂度少一个 $\log$。</p>
<p>基数排序是一种稳定的 O(值域) 的排序方法，通常在值域较小时使用</p>
<ul>
<li><p>对于单关键字：直接用一个桶 $c$ 记录各值域的出现次数，将它做一个前缀和，这时 $c[i]$ 就是值域 $i$ 的排名了。但注意，每次查完值域 $i$ 的排名就要将它 - 1，因为相同值域可能有多个值。</p>
</li>
<li><p>对于多关键字，因为排序的优先级是从低关键字到高关键字的，要使当前关键字排序后不对后续产生影响，所以从高关键字到低关键字依次排序。如果从第一关键字开始排序的话，那最终的结果是按最后一个关键字优先的，所以只能采取依次从第 $k,k-1,k-2…1$ 关键字排序。</p>
</li>
</ul>
<p>对于此算法，只需用双关键字，所以先将第二关键字基数排序，再排第一关键字即可。</p>
<p>举个例子：<br>将 $(1,1),(1,2),(2,1),(1,3),(2,2),(2,1)$ 从小到大排序</p>
<p>首先按第二关键字排序</p>
<p><img src="/./img/rvexc01m.png"></p>
<p>所以，排名如下</p>
<p><img src="/./img/yyzb5ct3.png"></p>
<p>排序结果：$(1,1),(2,1),(2,1),(1,2),(2,2),(1,3)$</p>
<p>再按第一关键字排序</p>
<p><img src="/./img/nzgdg7ii.png"></p>
<p>所以，最终的排名为（按第一次排序后的编号）</p>
<p><img src="/./img/ucs8e26p.png"></p>
<p>排序结果：$(1,1),(1,2),(1,3),(2,1),(2,1),(2,2)$</p>
<h3 id="常数优化"><a href="#常数优化" class="headerlink" title="常数优化"></a>常数优化</h3><ol>
<li>其实第二关键字不需要基数排序</li>
</ol>
<ul>
<li><p>对于长度超范围的，直接将其列入排序结果的首部（因为第二关键字为最小值）</p>
</li>
<li><p>对于在范围内的，按上一次更新完的 $sa$ 依次从下标 $1$ 到 $n$ 遍历，存在 $sa[i] - 2^k &gt; 0$ 的，将 $sa[i] - 2 ^ k$ 放入排序结果（也就是当前的 $sa[i]$ 为 以 $sa[i]-2^k$ 为第一关键字排序的 第二关键字)。根据 $sa$ 的定义，按顺序遍历 $sa$ 取出的结果就是已经从小到大排过序的（$sa[i]$ 为第$i$ 名的编号），所以可以证明它的正确性。</p>
</li>
</ul>
<p> 这样的做法是严格 $O(n)$ 的，比一次基数排序的常数小一点</p>
<ol start="2">
<li>对于不同的排名等于 $n$ 时，可直接结束</li>
</ol>
<p> 不断倍增下去时实际上是使这个排名越来越精准，不出现重复。</p>
<p> 但如果当前已经是不重复的了，就没必要继续倍增下去。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这是 P3809 模板题的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> fastio&#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) f = -f;</span><br><span class="line">            c = <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">        t = x * f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args&amp;... args)</span></span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">write</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), t = -t;</span><br><span class="line">        <span class="keyword">if</span>(t &gt;= <span class="number">10</span>) <span class="built_in">write</span>(t / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(t % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastio;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> n, m = <span class="number">130</span>, x[N], y[N], c[N];<span class="comment">//x即rk</span></span><br><span class="line"><span class="type">int</span> sa[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[x[i] = s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) c[i] += c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) sa[c[x[i]]--] = i;</span><br><span class="line">    <span class="comment">//对长度为1的基数排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i) y[++p] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sa[i] &gt; k)&#123;</span><br><span class="line">                y[++p] = sa[i] - k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二关键字无需基数排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) c[i] += c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) sa[c[x[y[i]]]--] = y[i];</span><br><span class="line">        <span class="comment">//对第一关键字基数排序</span></span><br><span class="line">        y[sa[<span class="number">1</span>]] = <span class="number">1</span>, p = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//将x设为旧的rk，y为新的rk，最后再调换回来，节省空间</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            y[sa[i]] = (x[sa[i]] == x[sa[i<span class="number">-1</span>]] &amp;&amp; x[sa[i] + k] == x[sa[i<span class="number">-1</span>] + k] ? p : ++p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//如果排名都不相同，就可以不用继续了</span></span><br><span class="line">        m = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">	n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">SA</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cout &lt;&lt; sa[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><p><a href="https://www.luogu.com.cn/problem/P3809">P3809 【模板】后缀排序</a></p>
<p><a href="https://www.luogu.com.cn/problem/P4051">P4051 JSOI2007 字符加密</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://wenku.baidu.com/view/0dc03d2b1611cc7931b765ce0508763230127479.html?_wkts_=1668593234484">后缀数组 by. 徐智磊</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%B5%85%E8%B0%88%E7%BD%91%E7%BB%9C%E6%B5%81%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<p>网络流，网络建模最毒瘤。</p>
<p>本篇学习笔记为本人学习网络流建模的一些基本模型，也作为当前常见网络流建模的一个汇总。</p>
<p>只写了一点，可能有时间再补。</p>
<hr>
<p>$last \space updated:2023.3.31$</p>
<p>有些建模的题只写上来了几道，还会继续更，很多模型还没写上去。qwq</p>
<hr>
<h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><h3 id="朴素建模"><a href="#朴素建模" class="headerlink" title="朴素建模"></a>朴素建模</h3><ul>
<li><a href="https://www.luogu.com.cn/problem/P3376">P3376 【模板】网络最大流</a></li>
</ul>
<p>模板题，按照题目输入连边跑最大流即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2936">P2936 [USACO09JAN]Total Flow S</a></li>
</ul>
<p>依照题意输入连边跑最大流即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1343">P1343 地震逃生</a></li>
</ul>
<p>按照题意连 $a \to b$，容量为 $c$ 的边，跑一次最大流，记录流量 $Flow$。</p>
<p>若 $Flow &#x3D; 0$，无解。否则输出答案 $\left\lfloor \dfrac{x-1}{Flow}\right\rfloor + 1$。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2740">P2740 [USACO4.2]草地排水Drainage Ditches</a></li>
</ul>
<p>模板题，源点 $1$，汇点 $n$，按照题目输入连边跑最大流即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P3701">P3701 主主树</a></li>
</ul>
<p>按照题意将 bxy 阵营中每个人向对方阵营中可以击败的人连容量 $1$ 的边，$s$ 向 bxy 阵营中每个人连容量为每个人的生命，对方阵营中每个人向 $t$ 同样连他们生命为容量的边。并且，统计每个阵营中 YYY 的数量，将每个阵营中的 J 的生命加上他所在阵营中的 YYY 数量即可。<strong>注意：YYY 给 J 加生命，并不需要浪费 YYY 的生命，所以直接加上即可，不需要连边</strong>。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2472">P2472 [SCOI2007] 蜥蜴</a></li>
</ul>
<p>简单拆点题。因为每个石柱只能条 $h_{i,j}$ 次，所以要将每个点进行<strong>拆点</strong>。具体来讲，将每个点 $(i,j)$ 拆成 $(i,j),(i,j)’$ 两点，且连边 $(i,j) \to (i,j)’$，容量为 $h_{i,j}$。（ps：每个二维点 $(i,j)$ 可以转化为一维的编号 $(i-1) \times m + j$，$m$ 为最大的第二维度的编号。并且，可以将 $(i,j)’$ 的编号设为 $(i,j) + n \times m$，这样就好处理一点）。再将图中任意两个距离 $\le d$ 的点 $(x,y)$ 和 $(x’,y’)$ 连 $(x,y)’ \to (x’,y’)$，容量 $inf$。（就是拆点情况下一个点的出点连向另一点的入点） 。源点 $s$ 向每个蜥蜴点连容量为 $1$ 的点，每个能直接跳出边缘的点连向汇点 $t$ 容量 $inf$。</p>
<h3 id="三分图匹配"><a href="#三分图匹配" class="headerlink" title="三分图匹配"></a>三分图匹配</h3><p>想了想，还是将这个专题放在最大流中，毕竟还是和二分图有点不同之处的。</p>
<p>首先，三分图的定义还是与二分图类似，将所有的点分成三部分，点集 $A,B,C$。其中，$A,B$ 和 $B,C$ 之间有连边且只有它们间有连边。问这 $3$ 个点集最大匹配是多少。</p>
<p>传统的匈牙利匹配还是可行的，但极力不推荐。因为三分图的点数更多了，而匈牙利复杂度是 $O(nm)$ 的，dinic 的复杂度是 $O(m \sqrt{n})$ 的。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1402">P1402 酒店之王</a></li>
</ul>
<p>模板的三分图匹配，但因为每个房间和菜只能选 $1$ 次，所以要对于每个点进行<strong>拆点</strong>处理，将每个人作为中间点集 $B$，将每个房间向所有喜欢它的人连边，每个人再向所有他喜欢的菜连边（房间和菜都是要拆点的）。源点 $s$ 连向所有房间，再将所有菜连向汇点 $t$。本题涉及的所有边权都是 $1$。（因为都只能选 $1$ 次呀）</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1231">P1231 教辅的组成</a></li>
</ul>
<p>也是和上题类似，三分图匹配的板子。将每本书作为中间点集，答案和练习册作为剩下的两个点集，还是要拆点（只能匹配 $1$ 个）处理，一样地跑最大流就行。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2891">P2891 [USACO07OPEN]Dining G</a></li>
</ul>
<p>完全相同的三分图模板，正常跑即可，和上面两题没有什么本质上的区别。注意，还是要拆点的。</p>
<h3 id="分层图"><a href="#分层图" class="headerlink" title="分层图"></a>分层图</h3><ul>
<li><a href="https://www.luogu.com.cn/problem/P2754">P2754 [CTSC1999]家园 &#x2F; 星际转移问题</a></li>
</ul>
<p>考虑到对于每个飞船的周期行驶和太空站的停留很难处理，所以可以使用<strong>分层图</strong>来解决这些问题。首先，可以将原图按时间分层，每层都有 $n$ 个节点表示这个时间点的 $n$ 个星球情况。当可以表示时间这个维度时，周期也很好处理了。对于每个飞船，将它从上一层停留的节点 连向 按周期行走时到这一层停留的节点。也就是 $u_{cur-1} \to v_{cur}$（$u,v$ 是它运行周期中相邻的两个节点），容量为 $h_i$<br>。同时，因为人可以在每个节点上停留，所以可以对于每个 $u$ 连 $u_{cur-1} \to u_{cur}$，容量为 $inf$。</p>
<p>连接 $s \to earth$，容量为 $k$。 </p>
<p>然后有两种方法：</p>
<ol>
<li>二分</li>
</ol>
<p>显然可以二分答案，处理这个时间。</p>
<p>每次重新按上面建图，$s$ 在第一层连接到 $earth$，容量 $k$。在 $mid$ 层的 $moon_{mid}$ 连到 $t$，容量也是 $k$。然后跑最大流，如果结果等于 $k$ 的话，那么就说明这个答案符合要求。</p>
<ol start="2">
<li>累加最大流</li>
</ol>
<p>可以每层都跑一次最大流，<strong>只在上一层跑完的残量网络上跑，不能重新建图</strong>。</p>
<p>枚举每个时间，每层从上一层连完后再将每一层的 $moon_i \to t$，容量 $inf$。<strong>注意：每一层的月球节点都要向汇点连边，而源点只能在第一层向地球节点连容量 $k$ 的边</strong>。 因为人是可以在地球上停留的，也最多只能给 $k$ 的流量，不能给多。同理，月球也是可以从上一层继承的，但是不明确最后的节点在哪（因为是枚举时间的），所以每层都要连一遍。</p>
<p>当累加到 $k$ 时，那么当前的时间 $cur$ 就是答案。</p>
<p>如何处理无解？</p>
<p>可以使用并查集维护一下连通性（最严谨的），也可以二分时没答案就是无解，或者枚举时间时找个极大值，如果超过它还没解，就是无解。</p>
<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><p>最大流跑二分图匹配时，建立超级源点 $s$ 连接每个左边的节点，将每个右边的节点连到超级汇点 $t$。如下图。</p>
<p><img src="/./img/n6j20hbz.png"></p>
<h3 id="朴素建模-1"><a href="#朴素建模-1" class="headerlink" title="朴素建模"></a>朴素建模</h3><ul>
<li><a href="https://www.luogu.com.cn/problem/P2763">P2763 试题库问题</a></li>
</ul>
<p>将每个试题 $i$ 作为左边节点，每种类型 $p_i$ 作为右边节点。</p>
<p>$s$ 向每个试题连一条容量 $1$ 的边，每种类型向 $t$ 连容量为需求量的边。</p>
<p>每个试题 $i$ 向每个它可以属于的类型 $p_{i,j}$ 连容量为 $1$ 的边。</p>
<p>输出方案时在 残量网络 中寻找 与每个类型连边且不是汇点的 有流量经过 的边，输出那个节点即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="type">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(e[i].w &amp;&amp; v &lt;= n)&#123;<span class="comment">//e[i].w 为正表示残量网络中有流量</span></span><br><span class="line">        <span class="comment">//v &lt;= n 是表示边连的是题目的节点而不是汇点。</span></span><br><span class="line">            <span class="built_in">write</span>(v), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="网格图模型"><a href="#网格图模型" class="headerlink" title="网格图模型"></a>网格图模型</h3><p>网格图是天然的二分图，它既可以将所有行和列分成两边的节点，相互连边表示一个点，还可以黑白染色等处理，让其变成一个二分图。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1129">P1129 [ZJOI2007] 矩阵游戏</a></li>
</ul>
<p>观察题目，手玩一下样例可以发现一个性质：对于任意的行或列，无论进行多少次操作，它的黑点个数都是不变的。</p>
<p>因为对于一个行，和其他行交换明显不会改变它任何状态，交换列也只是将它上面的黑点的位置改变，数量也是不变的。同理，列也是如此。</p>
<p>所以可以考虑把每行当成左边的点，每列当成右边的点，每个黑点 $(x,y)$ 连 $row(x) \to col(y)$，然后跑最大匹配即可。</p>
<p>如果匹配数为 $n$ 就是有解，否则无解。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2825">P2825 [HEOI2016&#x2F;TJOI2016]游戏</a></li>
</ul>
<p>网格图，很快就可以得结论。如果没有 <code>#</code> 的限制就类似八皇后问题。因为每行和每列都只能有一个点，所以可以将行和列组成一个二分图，可以放的地方连边 $row(x) \to col(y)$，最大匹配。但是有了 <code>#</code> 的限制，如何解决？</p>
<p>可以将每一行和每一列分别分成由 <code>#</code> 隔开的几块，将它们分别编号，如样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#***</span><br><span class="line">*#**</span><br><span class="line">**#*</span><br><span class="line">xxx#</span><br></pre></td></tr></table></figure>

<p>将其行列编号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id：行  id：列</span><br><span class="line">#111	#246</span><br><span class="line">2#33	1#46</span><br><span class="line">44#5	13#6</span><br><span class="line">666#	135#</span><br></pre></td></tr></table></figure>

<p>可以观察到，每一行（或列）当它前面一个字符为 <code>#</code> 时，将其编号加一，也可以理解为每一个 <code>#</code> 往后就是新的一行（或列）。这样就可以解决 <code>#</code> 隔开的问题了。</p>
<p>然后按上述连边跑最大匹配即可。</p>
<h3 id="二分图最小点覆盖（Konig-定理）"><a href="#二分图最小点覆盖（Konig-定理）" class="headerlink" title="二分图最小点覆盖（König 定理）"></a>二分图最小点覆盖（König 定理）</h3><p>结论：<strong>二分图最小点覆盖&#x3D;最大匹配&#x3D;最大流</strong></p>
<p>证明：</p>
<p>在证明这个结论前，先来看几条关于二分图匹配的性质：</p>
<p>令左边点集 $A$，右边点集 $B$，已匹配的点集为 $P$，匹配的边集为 $E$。</p>
<p>设 $u \in A,v \in B$，且 $u,v$ 间有连边</p>
<ul>
<li><p>若 $u \notin P$，则必定存在 $v \in P$。因为若 $u,v$ 都没匹配，但它们之间有连边，它们之间必定可以匹配， 所以不可能存在 $u,v \notin P$ 的情况。</p>
</li>
<li><p>若 $u,u’,v,v’ \in P; u \to v \in E; u’ \to v’ \in E$，则肯定不存在 $u &#x3D; u’,u&#x3D;v’,v&#x3D;u’,v&#x3D;v’$ 这些情况。因为 $1$ 个点能且仅能匹配 $1$ 个点。</p>
</li>
<li><p>若 $u \in P$，则至少存在 $1$ 个 $v \in to(u),v\in P$，且必定存在且仅存在 $1$ 个 $v$，是直接与 $u$ 相匹配的。因为若没有任何与 $u$ 相连且匹配的点，$u$ 就不可能被匹配。</p>
</li>
</ul>
<p>有了这些性质，就比较好证明了。</p>
<ol>
<li>$P$ 覆盖了所有边</li>
</ol>
<p>证明：假设存在一条边 $e \notin E$ 没被覆盖，也就是它的两边的节点 $u,v$ 均没被匹配（$u,v \notin P$），则与性质 $1$ 矛盾。所以所有边中都至少有 $1$ 个节点被匹配到。</p>
<ol start="2">
<li>$|E| \le $ 最小点覆盖数</li>
</ol>
<p>证明：由性质 $3$ 得，$u$ 至少存在 $1$ 个与之匹配的 $v$，则对于边 $u \to v \in E$， 必定存在 $u$ 或 $v$ 来覆盖这个边。又因性质 $2$，对于每个匹配边 $u \to v$ 都与其他匹配边 $u’ \to v’$ 不存在交点。则每个匹配边都需要至少 $1$ 个节点覆盖。所以必定覆盖点数是大于或等于匹配边的数量的。（不然匹配边都没法被覆盖了）</p>
<ol start="3">
<li>构造匹配</li>
</ol>
<p>从 $A$ 集的未匹配点 $u(u \notin P)$ 出发，走未匹配的边。由性质 $1$ 可得，必定能走到一个 $v \in P$，再从 $v$ 走匹配的边到 $u’ \in P$，又从 $u’$ 走没匹配的边至 $v’$。以此类推，最后由匹配边结束（有最大匹配）。那么，可以构造所有 $u \in A$ 且 $u$ 没被遍历与所有 $v \in B$ 且 $v$ 被遍历过了。这些点数必然是等于 $|E|$ 的，且根据刚刚的遍历顺序，这些点又必然覆盖了所有边。（可由定理 $1$ 推导）</p>
<p>因为二分图最小覆盖点数是 $\ge |E|$ 的（定理 $2$），且能构造出一种点数为 $|E|$ 的点将所有边覆盖。所以，最小覆盖点数肯定是等于 $|E|$ 的，也就是最大匹配数。</p>
<p>证毕。</p>
<h3 id="二分图最大独立集"><a href="#二分图最大独立集" class="headerlink" title="二分图最大独立集"></a>二分图最大独立集</h3><p>在二分图最小点覆盖中，每条边都至少有 $1$ 个点被选。那么对于所有没有被选的点，不可能在 $1$ 条边上出现多于 $1$ 个（因为如果这条边上两个点都没被选，那这条边也不会被覆盖了），所以可以保证没被选的点集是独立的。然而又因为没有更小的点覆盖了，所以最大的独立集也只能是最小点覆盖集的补集（没被选的点），也就是 $n - |E|$。</p>
<h4 id="棋盘选点问题"><a href="#棋盘选点问题" class="headerlink" title="棋盘选点问题"></a>棋盘选点问题</h4><ul>
<li><a href="https://www.luogu.com.cn/problem/P4304">P4304 [TJOI2013]攻击装置</a></li>
</ul>
<p>从矩阵上一点出发黑白染色，将它能攻击到的地方染成与它相反的颜色。则可以将原图分为两个点集（黑色与白色的）</p>
<p><img src="/./img/lrtxla81.png"></p>
<p>如上图，则可以构造一个二分图，将所有黑色的点与所有它能访问到的白色的节点，且能放装置的点连边。然后求最大独立集（要求不能互相攻击）即可。</p>
<p>具体来讲，黑色的点是 $x + y \equiv 0 \pmod{2}$的点，白色的点是 $x +y \equiv 1 \pmod{2}$ 的点。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P3355">P3355 骑士共存问题</a></li>
</ul>
<p>与 <a href="https://www.luogu.com.cn/problem/P4304">P4304 [TJOI2013]攻击装置</a> 完全相同，按照 P4304 的建图方式跑即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P5030">P5030 长脖子鹿放置</a></li>
</ul>
<p>与前两题类似，可以先将每个点能攻击到的点黑白染色，可以发现如下规律：</p>
<p><img src="/./img/b4fje2re.png"></p>
<p>则可以将所有黑色的点连向<strong>所有能放置的且能攻击到的</strong>白色节点。</p>
<p>黑色的节点是行数为奇数的点，白色的为行数为偶数的点。连边跑二分图最大独立集即可。</p>
<h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>最小割是指将原图划分为两个集合 $S$ 和 $T$，其中 $s \in S, t\in T$，最小的 $\sum\limits_{u\in S, v \in T} w(u,v)$， $w(u,v)$ 为 $u \to v$ 边的边权。</p>
<p><strong>定理</strong>：最大流&#x3D;最小割（仅在数值上相同）</p>
<h3 id="朴素建模-2"><a href="#朴素建模-2" class="headerlink" title="朴素建模"></a>朴素建模</h3><p>题目描述将图的节点分为两部分，求最小割时，使用朴素建模。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P3931">P3931 SAC E#1 - 一道难题 Tree</a></li>
</ul>
<p>让根节点与所有叶子节点不连通，显然最小割，将所有叶子节点连到汇点 $t$，源点 $s$ 为根节点，从根开始往下遍历，在原图的边中，使深度小的点连到深度大的点，最后跑一边最小割即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1345">P1345 [USACO5.4]奶牛的电信Telecowmunication</a></li>
</ul>
<p>由题意得，$c1,c2$ 分别是源点和汇点。因为是要求最小的断开电脑数量，所以不能在边上体现，要将每个电脑 $i$ 拆点为 $i, i+n$，使 $i \to i + n$ 边权为 $1$。（$s,t$ 的边权为 $inf$，因为它们不能被销毁。）然后连双向边 $u \to v, v \to u$ 都为 $inf$（题目中说的是双向联通），跑最小割即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2598">P2598 [ZJOI2009]狼和羊的故事</a></li>
</ul>
<p>题目让我们求将狼和羊分开的最小篱笆个数，也就是最小割。</p>
<p>那么两个格子之间如何连边呢？因为要将羊和狼的格子隔开，所以可以将所有 羊 的节点向周围所有 不是羊 的节点连边权为 $1$ 的边。又因为有空地的存在，可以在另一方面阻挡羊和狼，所以可以将每个空地周围所有不是羊的节点和它们连边（因为是羊的刚刚连过了）。最后套路将 $s$ 连向所有羊，所有狼连向 $t$，边权均为 $inf$。最小割就是答案。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1344">P1344 [USACO4.4] 追查坏牛奶 Pollutant Control</a></li>
</ul>
<p>题目乍一看，像是一个最小割模板。第一问就直接求最小割即可，关键在于第二问的最少停止的卡车数量。第二问实质上就是求<strong>所有的最小割中 最少割掉的 边数量</strong>，所以可以考虑将边权都赋为 $1$ 再求一遍最小割。但是有问题，新的最小割的这些边放到原图中不一定是原图的最小割。所以，只能取第一问最小割中流量流过的边，也就是残量网络中有流量的边，将它们在新图中的边权赋为 $1$，原图的其他边边权都赋为 $inf$，这样就能保证以边权最小割为前提下的最少数量了。</p>
<h3 id="网格图"><a href="#网格图" class="headerlink" title="网格图"></a>网格图</h3><ul>
<li><a href="https://www.luogu.com.cn/problem/P2774">P2774 方格取数问题</a></li>
</ul>
<p>给定一个网格图，让你求最大权值的点集使它们没有公共边。</p>
<p>很显然，当选择一个点后，它所有邻点都不能选了。所以可以对网格图黑白染色，将它的点集分为两个，黑色的和白色的。此时，选择一个黑色的点就不能选它周围的所有白色点，选白色的同理。所以，可以建立一个二分图，左边为黑点，右边为白点，将黑点和所有<strong>相邻的白点</strong>连边，容量为 $inf$ （为什么？）。然后 $s \to black_{i,j}$，容量 $a_{i,j}$，$white_{i,j} \to t$，容量 $a_{i,j}$。令 $sum &#x3D; \sum{a_{i,j}}$，$sum - mincut$ 就是答案。</p>
<p>简单证明一下。对于一个黑点 $black_{i,j}$，设它周围的几个点为 $white_{i-1,j},white_{i,j-1},white_{i,j+1},white_{i+1,j}$。因为它们之间的连边为 $inf$，所以不可能成为 $cut$，所以黑点和它周围的 $4$ 个白点是必然联通的。</p>
<p>若割掉 $black_{i,j}$，那么周围的 $white_{i-1,j},white_{i,j-1},white_{i,j+1},white_{i+1,j}$ 就不会与 $s$ 联通，<strong>剩下的</strong>贡献是这 $4$ 个白点。</p>
<p>若割掉 $white_{i-1,j},white_{i,j-1},white_{i,j+1},white_{i+1,j}$，那么<strong>剩下的</strong>贡献就是 $black_{i,j}$ 的权值，也不会与 $t$ 联通了。</p>
<p>对于所有这样的一组点，割断的方式必定是两种中的一种，所以肯定能使它们在原网格图中不连通。</p>
<p>又因为最小割是上述两种<strong>割掉的</strong>权值中的最小值，所以用所有节点的权值和减去它，剩下的必定是最大的。</p>
<h3 id="分组问题（二选一问题，相同分组计算贡献）"><a href="#分组问题（二选一问题，相同分组计算贡献）" class="headerlink" title="分组问题（二选一问题，相同分组计算贡献）"></a>分组问题（二选一问题，相同分组计算贡献）</h3><p>分组问题、二选一问题，便是要将每个物品分到两个集合 $A,B$ 中，分到集合 $A$ 的花费（或收入）是 $a_i$，放到集合 $B$ 的花费（或收入）为 $b_i$。</p>
<p>对于建模，可以将每个物品 $i$，连 $s \to i$，表示分到 $A$ 集合，边权为 $a_i$。连 $i \to t$，表示分到 $B$ 集合，边权为 $b_i$。此时最小割就是分组的最小花费了（同理，所有边权之和 $sum$ 减去最小割就是最大收入 $sum - mincut$），因为每个节点都连到 $s$ 或 $t$，要想让它们不连通，只能断掉到 $s $ 或到 $t$ 的边了，也就是选——最小花费（或不选——最大贡献）哪一条边。</p>
<p>关于这类问题，往往会有一些附加条件。最常见的便是对于几个物品 $p_1,p_2 \dots p_m$，<strong>全都</strong>在相同的分组（集合）中会有额外的贡献，求最大的总贡献。例如这 $m$ 个物品都在 $A$ 集合时的贡献为 $c_1$，都在 $B$ 集合时有贡献 $c_2$。考虑在连边中表现出这个贡献。如果都在集合 $A$，便可以设立虚点 $x$，使得 $s \to x$，容量为 $c_1$， $x \to p_1,p_2 \dots p_m$ 连 $m$ 条边，容量都是 $inf$。此时最小割就是答案，为什么？</p>
<p><img src="/./img/sbcz78o2.png"></p>
<p>考虑上图，若 $1$ 在集合 $A$， $2$ 在集合 $B$，那么会怎样？（不考虑 $3$ 节点）</p>
<p><img src="/./img/29roncsj.png"></p>
<p>那么，在这种情况下， $s$ 到 $t$ 还是联通的，因为有这个虚点 $x$ 的存在。</p>
<p>又因为 $x \to 2$ 边权为 $inf$，所以 $c1$ 这个贡献肯定是被割掉了。</p>
<p>同理，当 $1,2$ 没有同时属于集合 $A$ 时，$c1$ 都会被割掉。</p>
<p>所以，只有在 $1,2$ 共同属于 $A$ 时，$c1$ 才不会被割掉，会加到 $sum$ 中不会被减去。（因为收入&#x3D; $sum - mincut$）</p>
<p>那么，同理，$c_2$ 也是类似的连边。</p>
<p><img src="/./img/j5p3k7bg.png"></p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1361">P1361 小M的作物</a></li>
</ul>
<p>模板题，直接套用刚刚的模型 $s \to i$ 表示 $i$ 在 $A$ 种植， $i \to t$ 表示在 $B$ 种植，对于每种组合按上述方法建立虚点，跑最小割即可。</p>
<p>答案就是 $sum - mincut$（最大收益）。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2057">P2057 [SHOI2007] 善意的投票 &#x2F; [JLOI2010] 冠军调查</a></li>
</ul>
<p>类似的二选一问题，但是将贡献从 $p_1,p_2$ 在相同集合中会有收益变为了它们不在同一集合时有花费，如何解决？</p>
<p>假如说没有好朋友的限制，就直接将每个小朋友依照意愿向 $s$ 或 $t$ 连边即可。</p>
<p>有了好朋友的限制，可以将每对好朋友 $u,v$ 连 $u \to v$，$v \to u$ 的边，表示它们在相同立场（双向边是因为朋友关系是对称的，a 是 b 的朋友，b 也是 a 的朋友），最小割就是答案。</p>
<p>证明：若割掉了朋友之间的连边，相当于多一个朋友之间冲突的花费，对于他们的本身意愿没有影响。若割掉两人其中一个向源或汇点连的边，相当于舍弃自身意愿，满足好朋友，就是与本身意愿冲突的花费。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1646">P1646 [国家集训队]happiness</a></li>
</ul>
<p>模板，套用上述模型。每个点连到文科（$s$）和理科（$t$），再相邻每两个人之间建立两个虚点表示同选文科或理科即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P4313">P4313 文理分科</a></li>
</ul>
<p>同上题，只是将相邻两个人分组相同的贡献改成周围的人都与其相同的贡献，套模型即可。</p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1935">P1935 [国家集训队]圈地计划</a></li>
</ul>
<p>也是一道经典的分组问题。但这题的变化之处在于<strong>不同</strong>分组有贡献。</p>
<p>但是，不同分组的正贡献是无法用这个模型来表示出来的，所以要考虑转换思路，如何将<strong>不同分组</strong>转换为<strong>相同分组</strong>。</p>
<p>可以将原网格图进行黑白染色，任意相邻两格黑白颜色均不同，那显然可以将原图分为两种节点（注意：这里不是二分图，只是点类型不同）黑或白。将黑色或白色节点的权值倒置（将原来分到 $A$ 集合的权值 $a_i$ 分到集合 $B$，原来分到 $B$ 集合的 $b_i$ 分到集合 $A$），这样做<strong>并不会对每个点自身的取值有任何影响</strong>，因为选两集合中的一个都是对称的，没有本质上的不同。而且，这样做完美地将<strong>不同集合</strong>转化成了同一集合（因为将其中一种颜色的所有点权值倒置了），就能直接套用模型了。</p>
<p>具体来讲，将 $(x + y) \equiv 1 \pmod 2$ 的节点的 $a_i$ 与 $b_i$ 交换。然后相邻两节点同上建立两个虚点，分别向 $s$ 和 $t$ 都连 $c_{i,j} + c_{newi,newj}$（因为选集合就行了，不论都选哪个集合都是等价的）。然后用所有权值和减去最小割即可。 </p>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P4210">P4210 土地划分</a></li>
</ul>
<p>一道好题，主要难点就是求<strong>不同分组的负贡献</strong>。如果先不考虑两个节点不同集合带来的负贡献的话，那么就是分组问题的模板。对于两个相同集合的点，建立虚点 $x’$，使得 $s \to x’$ 边权 $EA$，然后 $x’ \to u$，$x’ \to v$ 边权 $inf$，连到 $t$ 同理。然后考虑将这个负贡献加进来，因为不能直接表现，所以要将其转化为相同分组的贡献。因为最后的答案是 $sum - mincut$，所以可以想到<strong>在这个最小割中将贡献转为正，然后在权值和中不加上它，最后的贡献就是负的了</strong>（相当于 $sum - (mincut + EC)&#x3D;sum - mincut - EC$）。有了这个思路，那么接下来的就很好理解了。将 $s \to x’$，$y’ \to t$ 中的边权都加上 $EC$，然后在 $sum$ 中加上<strong>一个</strong> $EC$。此时，若这两个节点在同一集合，那么 $mincut$ 中会有一个 $EC$，$sum$ 中多加的一个 $EC$ 和它正好抵消了。若它们不在同一集合，那么 $mincut$ 中会有两个 $EC$，此时的贡献正好多了个 $-EC$，巧妙地将它的负贡献表示出来了。</p>
<p>具体实现可以见 <a href="https://minilong.blog.luogu.org/solution-p4210">link</a>。</p>
<h3 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h3><p>最大权闭合子图，指在一张有向图 $G$ 中选择一张子图 $G’$，使得 $\forall u \in G’, to(v) \in G’$，$to(u)$ 指 $u$ 在原图中的后继，求最大 $G’$ 权值和。文字化来讲，就是选出一些节点，让它们的后继都被选，也就是选了一个节点 $u$ 就必须选所有他的后继 $v \in to(u)$，你要让这些选出来节点的和最大（每个节点的权值<strong>可以为负数</strong>）。</p>
<p>对于建模，因为不能有负容量的边，所以只能另想办法。</p>
<p>设每个点的点权为 $a_1,a_2 \dots a_n$。</p>
<p>若 $a_i &gt; 0$，则 $s \to i$，权值为 $a_i$。</p>
<p>若 $a_i \le 0$，则 $i \to t$，权值为 $-a_i$。</p>
<p>然后将原图中所有 $u \to v$ 的边权设为 $inf$。</p>
<p>所有正权值之和 $sum$ 减去最小割 $mincut$ 即是答案。为什么？</p>
<p><img src="/./img/lext9cbs.png" alt="原图"></p>
<p><img src="/./img/13idm1jx.png"></p>
<p>此时，因为原图中的每条边边权都为 $inf$，所以最小割不可能割到它，后继全取到的条件满足了。</p>
<p>再考虑断边的情况。</p>
<p>若不取一个正权值点，例如上图的 $s \to 10$ 的边断开后就不会通过这个点联通，那么 $sum$ 中原本的 $10$ 也会被减去，所以不会影响。</p>
<p>若取了一个正权值点，例如上图的 $s \to 10$ 的边联通，那么这时 $s$ 到 $t$ 还是联通的，要考虑继续割边。又因为原图中所有的边都不会被断开，所以能断开的就是这个点能走到的所有负权值点与 $t$ 的边，在上图的例子中就会割掉 $-5 \to t,-3 \to t, -2 \to t$ 三条边，如下图。</p>
<p><img src="/./img/zbwoc8pb.png"></p>
<p>这时，断掉的边 $mincut &#x3D; 5+2+3$ 正好对应 $-5,-2,-3$ 权值和的相反数。那么用 $sum - mincut$，那么它的贡献正好又变成负的了，完美地解决了正负性的问题。 </p>
<p>所以，选出来和的最大值就是 $sum - mincut$（使割掉的正权值 和割掉的负权值和的相反数 最小）</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E8%BF%9E%E7%BB%AD%E6%AE%B5%20dp/</url>
    <content><![CDATA[<p>在进行一些序列计数问题时，会遇到状态转移的时候限制 $a_i$ 与相邻两个数 $a_{i-1},a_{i+1}$ 的关系（如大小、差值等）。为了更好地解决此类问题，可以在序列两端插入新的值（一般按照大小关系有序插入），所以计数的策略是钦定一些固定的段中间不能再插入新的值了，每次插入只能在两个固定的段中间的区域插入，所以叫做连续段 dp。</p>
<hr>
<h3 id="P5999"><a href="#P5999" class="headerlink" title="P5999"></a>P5999</h3><p>考虑把跳跃的排列拿出来，这个排列需要满足的要求如下：</p>
<ul>
<li><p>$p_1 &#x3D; s,p_n &#x3D; t$</p>
</li>
<li><p>$\forall 2 \le i \le n - 1 ,(p_i &lt; p_{i-1} \land p_i &lt; p_{i+1}) \lor (p_i &gt; p_{i-1} \land p_i &gt; p_{i+1}) $</p>
</li>
</ul>
<p>考虑从小到大插入数值，钦定一个连续段内都是合法的，且连续段的开头大于它下一个数，连续段的结尾小于它上一个数（首尾除外）。设 $dp_{i,j}$ 为插入了 $1 \sim i$，且连续段个数为 $j$ 的方案数，设 $d_i &#x3D; [i&gt;s] + [i&gt;t]$。</p>
<p>考虑转移，特殊处理 $i&#x3D;s,i&#x3D;t$，有 $dp_{i,j} &#x3D; dp_{i - 1, j - 1} + dp_{i - 1, j}$，表示是否在开头&#x2F;结尾新建一段。当 $i\neq s \land i \neq t$ 时，有三种转移。</p>
<ul>
<li><p>新建一个段，$dp_{i, j} &#x3D; dp_{i - 1, j - 1} \times (j - d_i)$。</p>
</li>
<li><p>拓展一个段，在本题中，一个合法的连续段无法进行拓展，因为拓展之后这个连续段并不满足第一个&#x2F;最后一个大于后一个&#x2F;前一个数了。</p>
</li>
<li><p>合并两个段，$dp_{i, j} &#x3D; dp_{i - 1, j + 1} \times j$。</p>
</li>
</ul>
<p>复杂度为 $\Theta(n^2)$。</p>
<h3 id="CF1515E"><a href="#CF1515E" class="headerlink" title="CF1515E"></a>CF1515E</h3><p>可以按照时间顺序依次加入电脑，即先加入第一次开的，再加入第二次开的，在加入的时候考虑是否有 $i-1,i+1$ 都开了的情况。</p>
<p>相同地，考虑设 $dp_{i,j}$ 为加入了 $i$ 个电脑，有 $j$ 个加入时间的连续段的方案数。由于没有头和尾的限制，所以不用特殊处理，转移如下。</p>
<ul>
<li><p>新建一个段，$dp_{i,j} &#x3D; dp_{i-1,j-1} \times j$</p>
</li>
<li><p>拓展一个段，可以一次拓展一个或两个，$dp_{i,j} &#x3D; 2j \times (dp_{i-1,j}+dp_{i-2,j})$</p>
</li>
<li><p>合并两个段，可以一次加入两个或三个到中间，不能只加一个，$dp_{i,j} &#x3D; 2j \times dp_{i-2,j+1} + j \times dp_{i-3,j+1}$</p>
</li>
</ul>
<p>答案即为 $dp_{n,1}$，复杂度 $\Theta(n^2)$。</p>
<h3 id="P7967"><a href="#P7967" class="headerlink" title="P7967"></a>P7967</h3><p>显然题目可以转化为：对于每个 $k$ 求排列 $p$ 的个数满足 $\sum\limits_{i&#x3D;1}^{n-1} \max(a_{p_i},a_{p_{i+1}}) &#x3D; k$，贡献是 $\binom{l-k}{n}$。</p>
<p>将 $a_i$ 排序， 考虑设 $dp_{i,j,k}$ 为加入了前 $i$ 小的数，连续段个数为 $j$，且每个连续段内部的 $\max(a_{p_i},a_{p_{i+1}})$ 之和为 $k$ 的方案数。转移和上面类似。</p>
<p>$dp_{i,j,k} \leftarrow dp_{i-1,j-1,k} \times j, dp_{i,j,k} \leftarrow 2j \times dp_{i-1,j,k-a_i}, dp_{i,j,k} \leftarrow dp_{i-1,j+1,k-2a_i} \times j$，分别表示新建、拓展、合并段。</p>
<p>最后答案即为 $\sum\limits_{i&#x3D;0}^l dp_{n,1,i} \times \binom{l-i}{n}$。</p>
<p>复杂度 $\Theta(n^2 l)$。</p>
<h3 id="P9197"><a href="#P9197" class="headerlink" title="P9197"></a>P9197</h3><p>考虑从小到大加入 $a_i$，那么可以把绝对值拆开，考虑每个数的贡献。对于一个 $f_i$，若加入 $i$ 时 $i$ 左边、右边都没有数，贡献为 $-2f_i$，若有且仅有一边有数，贡献是 $0$，否则是 $2f_i$。</p>
<p>那么可以设计 $dp_{i,j,k,d}$ 表示加入 $a_1 \sim a_i$ 有 $j$ 个连续段，当前所有数的贡献之和为 $k$ ，开头结尾钦定的个数 $d$（$d \in {0,1,2}$）的方案数。转移有：</p>
<ul>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j-1,k+2f_i,d} \times (j-d)+ dp_{i-1,j-1,k+f_i} \times (3-d) \times [d&#x3D;1 \lor d&#x3D;2]$</p>
</li>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j,k,d} \times (2j - d) + dp_{i-1,j,k-f_i} \times (3-d) \times [d&#x3D;1 \lor d&#x3D;2]$</p>
</li>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j+1,k-2f_i,d} \times j$</p>
</li>
</ul>
<p>可以发现，由于有正负性的存在，可能 $k$ 会先减到很小，后面再加回来。所以第三维实际上是 $\Theta(nl)$ 的，总复杂度是 $\Theta(n^3l)$ 的，无法通过。</p>
<p>考虑有没有什么办法能让 $k$ 单调不降。考虑差分，设 $b_i &#x3D; a_{i+1} - a_i$，钦定 $b_n &#x3D; 0$，那么一个 $b_i$ 的贡献为满足 $\min(p_j,p_{j+1}) \le i, \max(p_j,p_{j+1}) &gt; i$ 的 $j$ 的个数。</p>
<p>那么当加入 $i$ 时，已经加入的所有数（包括 $i$）旁边没加入的数的个数之和就是贡献的个数。$dp$ 状态相同，转移如下。</p>
<ul>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j-1,k-b_i(2j-d),d} \times (j-d) + dp_{i-1,j-1,k-b_i(2j-d),d-1} \times (3-d) \times [d&#x3D;1 \lor d&#x3D;2]$</p>
</li>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j,k-b_i(2j-d),d} \times (2j-d) + dp_{i-1,j,k-b_i(2j-d),d-1} \times (3-d) \times [d&#x3D;1 \lor d&#x3D;2]$</p>
</li>
<li><p>$dp_{i,j,k,d} &#x3D; dp_{i-1,j+1,k-b_i(2j-d),d} \times j$</p>
</li>
</ul>
<p>答案为 $\sum\limits_{i&#x3D;0}^l dp_{n,1,i,2}$，复杂度 $\Theta(n^2l)$。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/tricks/</url>
    <content><![CDATA[<h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><ul>
<li><p>碰到等量条件，如 $a_x &#x3D; a_y$，可以使用并查集维护。</p>
</li>
<li><p>碰到不等量条件判断有无解，如 $a_x - w \le a_y$，可以差分约束维护，如 $a_x - a_y \le w$，连接 $y \to x,cost&#x3D;w$ 的边。判断负环即可。</p>
</li>
<li><p>碰到敌对关系，如 $A$ 是 $B$ 的敌人，$B$ 是 $C$ 的敌人，可以使用种类并查集维护。$merge(a,b+n),merge(a+n,b),merge(b,c+n),merge(b+n,c)$。可参考 <a href="https://www.luogu.com.cn/problem/P2375">P2375</a>。</p>
</li>
<li><p>网格图满足每个 $2 \times 2$ 的子图必须满足某些条件时，确定第一行和第一列即可确定整个图。</p>
</li>
<li><p>对于一个字符串 $s$，要对 $s$ 中删除每个位置形成的 $n$ 个串排序，可以线性解决。对于 $s’<em>x,s’<em>y$，只需考虑 $s</em>{x+1},…s_y$ 和 $s_x,…s</em>{y-1}$ 大小。从后往前扫一遍，发现 $s_i &#x3D; s_{i+1}$ 的，即 $s’<em>i &#x3D; s’</em>{i+1}$，合并即可。发现 $s_i &lt; s_{i+1}$ 的，那么 $\forall j&gt;i, s’_i &gt; s’_j$，插入链尾。大于插入链首。<a href="https://www.luogu.com.cn/problem/CF1393E2">CF1393E2</a></p>
</li>
<li><p>在字符串 $s$ 中寻找形如 $AAA$ 的循环字串，可以枚举循环节长度 $len$，将 $s$ 分为 $\dfrac{|s|}{len}$ 块，在每个块和块间用后缀数组或 hash 维护，复杂度 $O(n \ln n)$。<a href="https://www.luogu.com.cn/problem/P7180">P7180</a></p>
</li>
<li><p>求 $\min\limits_{l\le i &lt; j \le r} |a_j-a_i|$，可以对于每个 $i$ 去找 $j &lt; i$ 且 $j$ 最大的 $j$，满足 $a_j &gt; a_i$。这时的 $j$ 对 $l \in [1,j]$ 的区间有贡献，再往左找更优的 $j’$，必须满足 $a_{j’} - a_i &lt; a_j - a_{j’}$，也就是 $a_{j’}-a_i &lt; \dfrac{1}{2}(a_j - a_i)$，那么 $j’$ 就对 $l \in [1,j’]$ 的区间有贡献，一共只有 $O(n\log V)$ 个支配对。总复杂度 $O(n\log n \log V)$。<a href="https://www.luogu.com.cn/problem/CF765F">CF765F</a></p>
</li>
<li><p>切比雪夫距离：$\max(|x_2-x_1|,|y_2 -y_1|)$。距离一个点的切比雪夫距离在 $d$ 以内的所有点形成矩形，曼哈顿距离在 $d$ 以内的所有点形成菱形。若将曼哈顿距离转为切比雪夫距离（<strong>方便统计在某个曼哈顿距离之内 <strong>），那么菱形就会变成矩形，点的坐标从 $(x,y) \to (x+y,x-y)$。同理，将切比雪夫距离转为曼哈顿距离（</strong>方便统计距离之和</strong>），点坐标从 $(x,y) \to (\dfrac{x+y}{2},\dfrac{x-y}{2})$。</p>
<ul>
<li>证明：$x_1$ 和 $x_2$ 曼哈顿距离可以写成 $\max(x_1 - x_2 + y_1 - y_2,x_1 - x_2 + y_2 - y_1,x_2 - x_1 + y_1 - y_2,x_2 - x_1+y_2-y_1)$，即$\max(|(x1+y1)-(x2+y2)|,|(x1-y1)-(x2-y2)|)$。</li>
<li>同理，三维的曼哈顿转为切比雪夫距离为 $(x,y,z)\to (x+y+z,x+y-z,x-y+z,x-y-z)$。</li>
<li>所以 $n$ 为曼哈顿可以转为 $2^{n-1}$ 维切比雪夫距离。</li>
</ul>
</li>
<li><p>Pick 定理：整点多边形面积 $S &#x3D; x + \dfrac{b}{2} - 1$，$x$ 为内部格点，$b$ 为边上格点。</p>
</li>
<li><p>减半警报器：维护函数 $f(S,val)$，表示 $\sum\limits_{i \in S} a_i \ge val$ 的最早时刻，每次操作把 $a_i$ 加上一个数。解决方法：将 $val$ 平摊给每个 $i \in S$，具体地，对于每个 $f(S,val)$，在每个 $i \in S$，在 $i$ 处加入一个权值为 $\lceil \dfrac{val}{|S|} \rceil$（或 $a_i + \lceil \dfrac{val - \sum\limits_{i \in S} a_i}{ |S|} \rceil$） 的警报器，每次修改 $a_i$ 的时候遍历警报器，如果 $a_i$ 大于警报器的权值，就把这个警报器对应的集合 $S$ 中所有警报器重置，也就是将 $val - \sum\limits_{i \in S} a_i$  更新后再重新加入。时间复杂度 $O(n \log_{\frac{|S|-1}{|S|}}{V} \log{n})$。（用 set 或堆维护）。<a href="https://www.luogu.com.cn/problem/P7603">P7603</a></p>
</li>
<li><p>构造方案使得目标序列&#x2F;矩阵达成某种状态，且方案数不超过题目要求的常数时，可以考虑分治&#x2F;倍增解决。<a href="http://xsy.gdgzez.com.cn/JudgeOnline/problem.php?cid=2153&pid=0">怎么有人(why)</a></p>
</li>
<li><p>给定 $n$ 个二元组 $(x_i,y_i)$，每次询问给出 $a,b$，求 $\min{ {a\cdot x_i+b\cdot y_i} }$ ，答案必定在所有点集 $(x_i,y_i)$ 构成的 <strong>下凸包</strong> 上（求 $\max$ 则是 <strong>上凸包</strong>），可以通过二分斜率（或三分答案）的方式求出。 <a href="https://www.luogu.com.cn/problem/P3309">P3309</a></p>
<ul>
<li>证明：假设答案为 $c$，那么 $a \cdot x_i + b \cdot y_i &#x3D;c$，也就是说求满足 $y_i &#x3D; -\dfrac{a}{b}x_i + \dfrac{c}{b}$ 的 $c$ 最小值，因为 $a,b$ 为常数，所以也就是让斜率 $k&#x3D;-\dfrac{a}{b}$ 的直线去截这些点，求截距最小的，显然在下凸包上。</li>
<li>解法：求凸包上相邻两点斜率，二分找到 $k_1 &lt; k &lt; k_2$ 的点即可。</li>
</ul>
</li>
<li><p>卡特兰数：求合法括号串数量，二叉树个数，矩阵从 $(0,0)$ 走到 $(n,n)$，任何时刻往右次数不能小于往上。通项 $H_n &#x3D; \dfrac{\binom{2n}{n}}{n+1}&#x3D;\binom{2n}{n}-\binom{2n}{n-1}&#x3D;\sum\limits_{i&#x3D;0}^{n-1} H_iH_{n-i-1}$。</p>
</li>
<li><p>对于括号配对&#x2F; $1$ 和 $-1$ 组合等类似问题，满足对其前缀和或总和有一定限制，可以转换成在矩阵上从 $(0,0)$ 开始往右或往上走的问题。<a href="https://www.luogu.com.cn/problem/CF1924D">CF1924D</a></p>
</li>
<li><p>$\gcd(x^a-1,x^b-1)&#x3D;x^{\gcd(a,b)} -1$ <a href="https://www.luogu.com.cn/problem/P3598">P3598</a></p>
</li>
<li><p>区间 mex：主席树对每个值 $x$ 维护 $lst_x$ 为上次出现位置，每次在 $r$ 的主席树上二分找最小的 $lst_x &lt; l$。（$\text{kmex}$ <a href="http://xsy.gdgzez.com.cn/JudgeOnline/problem.php?cid=2151&pid=2">GZOI-NOI2024省选模拟测试赛（二十二） T3</a>）</p>
</li>
<li><p>线段树维护凸包，通过左右儿子的凸包归并 <a href="https://www.luogu.com.cn/problem/P3309">P3309</a></p>
</li>
<li><p>笛卡尔树子树 $siz_u&#x3D; r_u - l_u - 1$（$l_i,r_i$ 为左、右边第一个大于或小于 $a_i$ 的位置）。</p>
</li>
<li><p>笛卡尔树深度为 $d$ 的节点可以表示所有包含这个数的 不同的 区间最大值 个数为 $d$。</p>
</li>
<li><p>拓扑排序有个结论，给一个无向图定向，一定存在一种构造，对于所有拓扑序中，<strong>存在一些点的拓扑序始终不动，当且仅当这些点的度数为 $n - 1$，且这些点的个数就是所有拓扑序对的差异值的最小值</strong>。<a href="https://www.luogu.com.cn/problem/CF1477D">CF1477D</a></p>
</li>
<li><p>第二类斯特林数：$S(n,m)&#x3D;\dfrac{1}{m!}\sum\limits_{k&#x3D;0}^m (-1)^k \binom{m}{k}(m-k)^n&#x3D;S(n-1,m-1)+m\cdot S(n-1,m)$。性质：$n^k&#x3D;\sum\limits_{i&#x3D;0}^k S(k,i)i! \binom{n}{i}$</p>
</li>
<li><p>$\forall a&lt;b&lt;c,a \oplus c&gt;\min(a\oplus b,b\oplus c)$。</p>
</li>
<li><p>$n$个点的树，所有儿子编号小于父亲，共有 $n! \times \prod\limits_{i&#x3D;1}^n \dfrac{1}{siz_i}$ 种编号分配方案。</p>
</li>
<li><p>求 $\max\limits_{i \in S} x &amp; i$，每次加入 $i$ 到 $S$ 中的时候，递归覆盖 $i$ 的所有子集（剪枝：如果子集被覆盖过直接返回）。查询的时候从高位往低位贪心，设最高位到第 $i+1$ 位答案为 $cur$，$x$ 第 $i$ 位为 $1$。如果 $(cur | (1&lt;&lt;i))$ 被覆盖过，也就是 $\exist j\in S,j &amp; (cur|(1&lt;&lt;i))&#x3D;(cur|(1&lt;&lt;i))$ ，那么把 $cur$ 加上 $(1&lt;&lt;i)$。如果 $x$ 这一位为 $0$ 直接跳过。求 $\min$ 同理，将每个 $i \in S$ 按位翻转后最大值为 $cur’$，将 $cur’ \leftarrow cur’ \oplus x$  就是最小值。</p>
</li>
<li><p>维护区间中线段的交，可以用线段树维护。对于 $[l_i,r_i]$ 线段，将 $[l_i,r_i)$ 区间加 $1$，每遇到一个 $0$ 就是一个连通块的末尾。</p>
<ul>
<li>维护线段的权值（放到线段最前或最后），每个连通块权值就是这个连通块对应区间所有权值合并起来。</li>
<li>线段加删：考虑删除线段会加入很多 $0$，加入线段会删除很多 $0$，直接维护每个连通块不好维护。考虑改变定义：每个区间的连通块分割从 $0$ 变为这个区间的 $\min$。可以维护整个区间的权值（不管是不是连通块），从 $l$ 开始的极长非 $\min$ 连通块，从 $r$ 开始的非 $\min$ 连通块，和中间的连通块和。合并的时候套路 $[l,r]$ 的 $\min$ 是取在左儿子还是右儿子。</li>
<li>例题 <a href="https://www.luogu.com.cn/problem/CF1209G2">CF1209G2</a>，类似的题目 <a href="https://www.luogu.com.cn/blog/pks-LOVING/post-xue-xi-bi-ji-tu-dui-xian-duan-shu">维护前缀max的一些技巧</a>。</li>
</ul>
</li>
<li><p>判断一个点是否在一个闭合回路内部，从这个点向任意方向引一条射线，若不考虑相切，那么和回路的交点为奇数时这个点在回路内部，否则在外部 <a href="https://www.luogu.com.cn/problem/CF1920F2">CF1920F2</a></p>
</li>
<li><p>本质不同子序列个数：dp计算。若 $s_i &#x3D; j$，$f_{i,j}&#x3D;\sum\limits_k f_{i-1,k}$，否则 $f_{i,j}&#x3D;f_{i-1,j}$。可以矩阵转移。<a href="http://xsy.gdgzez.com.cn/JudgeOnline/problem.php?cid=2150&pid=0">GZOI-NOI2024省选模拟测试赛（二十一） T1</a></p>
</li>
<li><p>序列最大独立集 $val \ge \dfrac{S}{2}$</p>
</li>
<li><p>树形 （DAG）$dp$ 有后效性解决：必定满足 $dp_i &#x3D; k_i dp_j +b_i$，$j$ 是 $i$ 的后继。因为没有环，必定有终止节点。<a href="http://xsy.gdgzez.com.cn/JudgeOnline/problem.php?cid=2158&pid=1">GZOI-NOI2024省选模拟测试赛（二十八） T2</a></p>
</li>
<li><p>图上 $dp$ 满足转移有单调性（如 $dp_i &#x3D; \max\limits_{j\in to(i)} dp_j+s_j$），满足一个点比它所有后继&#x2F;前继都大&#x2F;小，且有后效性（有环），可以使用最短路模型（堆优化），每次取出当前最优，去更新后继。根据最短路的一套理论，每个点最多去更新后继一次。对每个点记录一个度数 $d_i$，如果 $i$ 被更新的次数等于 $d_i$，就将它加入堆。<a href="https://www.luogu.com.cn/problem/P4042">P4042 [AHOI2014&#x2F;JSOI2014] 骑士游戏</a>，<a href="https://www.luogu.com.cn/problem/P2446">P2446 [SDOI2010] 大陆争霸</a>。</p>
</li>
<li><p>bitset 维护所有 $a_i - a_j$，先将每个 $a_i$ 标为 $1$，再对于每个 $a_j,ans|&#x3D; G&lt;&lt;a_j$。</p>
</li>
<li><p>bitset 维护多维偏序。记录 $b_{i}$ 为与第 $i$ 个数满足偏序要求的数有哪些。枚举位数 $k$，排序后从左到右扫一遍 $j$，记录 $s$ 表示扫到 $j$ 时有哪些数满足第 $k$ 位偏序关系，然后更新 $b_j |&#x3D; s$ 即可。</p>
</li>
<li><p>当图论中出现不好维护的维度时，考虑分层图（如时间）。<a href="https://www.luogu.com.cn/problem/P2754">P2754</a></p>
</li>
<li><p>最小割分组问题：具体见 <a href="https://www.luogu.com.cn/article/2tl6pezn">网络流学习笔记</a> <a href="https://www.luogu.com/article/6xo7niho">两种模型</a></p>
</li>
<li><p>数列单调不减，值域较小 $\to$ 拆成若干个后缀 $1$ 的 $01$ 串表示。<a href="https://www.luogu.com.cn/problem/P2481">P2481</a></p>
</li>
<li><p>方案算重&#x2F;要求的是选的值组合起来值的方案：钦定按关键字从小到大取（按照某种顺序排列）的方案。</p>
</li>
<li><p>$d(x\cdot y)&#x3D;\sum\limits_{i | x} \sum\limits_{j | y} [\gcd(i,j)&#x3D;1]$，多个数也成立，如 $d(x\cdot y \cdot z) &#x3D; \sum\limits_{i|x}\sum\limits_{j|y}\sum\limits_{k|z} [\gcd(i,j)&#x3D;1][\gcd(i,k)&#x3D;1][\gcd(j,k)&#x3D;1]$。</p>
</li>
<li><p>$\varphi(ij)&#x3D;\dfrac{\varphi(i)\varphi(j)\gcd(i,j)}{\varphi(\gcd(i,j))}$</p>
</li>
<li><p>碰到统计序列 $a$ 字典序小于 $b$，或类似 $a$ 字典序小于 $x$，$b$ 字典序小于 $y$，$a,b$ 满足某种关系时，可以考虑枚举第一个不同的位置。</p>
</li>
<li><p>二进制下 $\oplus,\and,\or$ 等运算，且满足符合关系的两数满足某些限制，可以考虑数位 dp。如 $[i \oplus j \le k],i\le a,j\le b$，就可以枚举 $i,j$ 二进制下第一个与 $a,b$ 不同的位置，再统计满足要求的答案。<a href="https://www.luogu.com.cn/problem/CF809C">CF809C</a></p>
</li>
<li><p>两数相乘为平方数就是去掉所有平方因子相等的，这是充要条件。<a href="https://www.luogu.com.cn/problem/CF840C">CF840C</a></p>
</li>
<li><p>实数轴上选点期望转化为相对位置。<a href="https://www.luogu.com.cn/problem/CF1153F">CF1153F</a></p>
<ul>
<li>如果数轴长度 $[0,n)$，不妨将长度除以 $n$，不失去一般性。</li>
</ul>
</li>
<li><p>最值计数问题，形如设 $f(S)$ 为选择方案 $S$ 的最大值（最小值类似），要求的就是 $\sum\limits_{S} f(S)$，可以转化为 $\sum\limits_{ans} \sum\limits_S [f(S) \ge ans]$。<a href="https://www.luogu.com.cn/problem/CF1264D1">CF1264D1</a></p>
</li>
<li><p>组合恒等式</p>
<ul>
<li>$i \binom{x}{i}&#x3D; x \binom{x-1}{i-1}$</li>
<li>$\sum\limits_{i&#x3D;0}^n \binom{i}{x} &#x3D; \binom{n+1}{x+1}$</li>
</ul>
</li>
<li><p>树上深度有关构造想直径（深度max）</p>
</li>
<li><p>要求 <strong>两个数</strong> 和等于 $n$，位运算满足某些要求或者一些位运算的方案数&#x2F;方案和，可以考虑从低位往高位 $dp$，设 $dp_{i,0&#x2F;1}$ 位前 $i$ 位和等于 $n$ 的前 $i$ 位，且下一位有没有进位（额外的 $1$）的方案数。<a href="https://www.luogu.com.cn/problem/CF1815D">CF1815D</a></p>
</li>
<li><p>树的最大匹配&#x3D;最小点覆盖，在最大匹配较小时可以考虑枚举最小点覆盖，这样就可以找到必须的边了。<a href="https://www.luogu.com.cn/problem/CF1948G">CF1948G</a></p>
</li>
<li><p>$\forall n\ge 2$ 存在素数 $p$ 满足 $n \le p \le 2n$.</p>
</li>
<li><p>恰好 $k$ 个 $\to$ 容斥反演。</p>
</li>
<li><p>几何分布：设随机事件 $X$ 有 $p$ 的概率成功，$1-p$ 的概率失败，则成功期望次数为 $E(X)&#x3D;\sum\limits_{i&#x3D;1}^{\infin} i (1-p)^{i-1}p&#x3D;\dfrac{1}{p}$。</p>
<ul>
<li>求抽到一个集合 $S$ 中的期望步数，$E(X\in S)&#x3D;\dfrac{\sum\limits p(i)}{\sum\limits_{j\in S}p(j)}$，可以用这个直接乘以 $S$ 中自己达成某个目标的期望步数就是总的期望步数。</li>
</ul>
</li>
<li><p>$\operatorname{lcm}(S)&#x3D;\prod\limits_{T\subset S} \gcd(T)^{(-1)^{|T|+1}}$，<a href="https://www.luogu.com.cn/problem/P3598">P3598</a></p>
</li>
<li><p>有 $n$ 个点的树独立集个数下限为 $O(2^{\frac{n}{2}})$。<a href="https://contest-archive.loj.ac/contest/7/problem/2/">B.验题</a></p>
</li>
<li><p>$E(x)&#x3D;\sum\limits_i iP(x&#x3D;i)&#x3D;\sum\limits_{i} i(P(x\ge i) - P(x \ge i+1))&#x3D;\sum\limits_i P(x\ge i)$。</p>
</li>
<li><p>范德蒙德卷积的更多形式</p>
<ul>
<li>$\sum\limits_{i&#x3D;0}^n \binom{a+i}{i} \binom{b+n-i}{n-i}&#x3D;\binom{a+b+1+n}{n}$ 组合意义是把枚举 $i$，求 $x_1 +…+x_{a+1}&#x3D;i$ 方案数，后面同理，结合起来就是 $x_1 +…x_{a+b+2}&#x3D;n$ 方案数。</li>
<li>$\sum\limits_{i&#x3D;m}^n \binom{a+i-1}{i} \binom{b-1+n-i}{n-i}&#x3D;\sum\limits_{i&#x3D;1}^a \binom{m+i-2}{m-1}\binom{a+b-i+n-m}{n-m}$。原式相当于求至少 $m$ 个黑色球和 $n-i$ 个白色求分别放到 $a,b$ 个盒子中的方案数。不妨枚举第 $m$ 个黑色球所在盒子，前面 $i$ 个盒子能放 $m-1$ 个球，后面 $n-m$ 个球随意分配颜色，放到 $a+b-i+1$ 个盒子中，可以 $\Theta(\min(a,b))$ 计算。</li>
</ul>
</li>
<li><p>树上链操作求方案&#x2F;最值可以考虑差分（特别是异或的时候）</p>
</li>
<li><p>对排列取逆（即 $p_{q_i} &#x3D; i$，$q$ 为 $p$ 的逆），把 $p_i$ 用二元组表示为 $(i,p_i)$ 时，取逆就是交换为 $(p_i,i)$（也就是 $(j,q_j),j&#x3D;p_i,q_j&#x3D;i$）。<a href="https://www.luogu.com.cn/problem/CF1458C">CF1458C</a></p>
</li>
<li><p>当要求数列一段和 $\le x$ 的一些答案时，且 $x \le 20$ 左右，可以考虑用二进制表示每个数字。如 $5$ 表示为 $10000$，$3$ 表示为 $100$，总位数不超过 $x$，状压即可，每次加入就左移后与一下。<a href="https://www.luogu.com.cn/problem/AT_arc058_c">AT_arc058_c</a></p>
</li>
<li><p>区间路径上求出现次数不同的数，可以把出现次数哈希起来再分段二分寻找不同。<a href="https://codeforces.com/contest/1957/problem/F2">CF1957F2</a></p>
</li>
<li><p>竞赛图的性质：scc 组成的是一条链，每个点往后面所有的点连边。</p>
</li>
<li><p>统计序列循环重构方案可以考虑枚举循环节</p>
</li>
<li><p>两个序列在某种操作后或满足某种条件同构可以转化后尝试使用哈希解决</p>
</li>
<li><p>动态维护虚树大小：两棵dfs序不交的虚树的交一定是一条连，考虑维护根、深度，即可在dfn序列上合并，设 $[l,r]$ dfn 序的虚树大小为 $siz_1$ 最小 dfn 节点和最大是 $L_1,R_1$，$lca$ 是 $rt1$。合并不交的两个就是 $siz_1 + siz_2 + dep_{rt_1} + dep_{rt_2} - dep_{lca(rt1,rt2)}-dep_{lca(R_1,L_2)}-1$。或者按照 $dfn$ 序排序后 $\dfrac{1}{2} \sum\limits_{i&#x3D;1}^{n-1} dis(p_i,p_{i+1})$。</p>
</li>
<li><p>当发现 dp 转移过程中无法再优化时，不妨考虑 dp 数组的总和（被更新次数的总和）上界是多少，从而采取更暴力的方法优化。</p>
</li>
<li><p>设 $sum_i &#x3D; \oplus_{j&#x3D;1}^i j$，则当 $i \equiv 0 \pmod 4$，$sum_i &#x3D; i$，$i \equiv 1 \pmod 4$，$sum_i &#x3D; 1$，$i \equiv 2 \pmod 4$，$sum_i &#x3D; i + 1$，$i \equiv 3 \pmod 4$，$sum_i &#x3D; 0$​。 </p>
</li>
<li><p>形如 $w \ge a_i,w \leftarrow w-a_i$​。考虑倍增分块。</p>
</li>
<li><p>凸多边形被互不相交的线分隔时，若将一块区域视为一个点，一条边视为两个区域的边，那么形成一棵树。</p>
</li>
<li><p>一棵树存在完美匹配的充要条件是 $\sum\limits_u [2 | siz_u] &#x3D; \sum\limits_u [2 \nmid siz_u]$​ 。</p>
</li>
<li><p>一个树有两个重心的充要条件是存在一条边的两个端点的 $siz$ 都等于 $\dfrac{n}{2}$ 且 $2|n$​。</p>
</li>
<li><p>二分图存在唯一一个完美匹配的判定方法：一直删除度数为 $1$​ 的点，若能删完即存在唯一完美匹配，否则不存在或不唯一。</p>
</li>
<li><p>或、与的前缀和只有 $\Theta(\log V)$ 段。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/27/%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<ul>
<li>询问区间 $[l,r]$ 中的子区间 $[i,j]$ （个数、满足要求、最值）<ul>
<li>扫描线+历史和</li>
<li>二维数点</li>
<li>支配对</li>
</ul>
</li>
<li>询问以 $u$ 为根子树中两个属于不同儿子的点对<ul>
<li>dsu on tree</li>
</ul>
</li>
<li>询问一条链旁所有子树信息<ul>
<li>重链剖分，记录非重儿子信息</li>
</ul>
</li>
<li>询问距离点最远（单点或多点）<ul>
<li>直径端点</li>
<li>区间：可以线段树合并直径，或者st表（$(u_1,v_1),(u_2,v_2)$，合并是 $\max(dis(u_1,v_1),dis(u_1,v_2),dis(u_1,u_2),dis(v_1,v_2),dis(v_1,u_2),dis(u_2,v_2))$。</li>
</ul>
</li>
<li>询问连续区间到一个点的距离相关<ul>
<li>树上扫描线</li>
</ul>
</li>
<li>询问以每个点为根的所有子树信息<ul>
<li>树上扫描线，移动时之后更改 $\Theta(1)$ 个子树信息。</li>
</ul>
</li>
<li>询问树上一个连续区间（编号）的点是否组成一条链<ul>
<li>线段树维护信息合并，合并两条链枚举 $4$ 个点中的 $2$​ 个作为新的端点，再判断距离。</li>
</ul>
</li>
<li>询问数轴上对点两两匹配求长度和<ul>
<li>考虑相邻两个点的线段的贡献</li>
</ul>
</li>
<li>在树上从根开始取点，问拓扑序的权值（自定义）最大是多少（如 $w_{p_1}+2w_{p_2}+3w_{p_3}\dots$）<ul>
<li>考虑 Exchange Argument，通过一些属性判断两个点的先后关系，设立优先级。然后把每个点的优先级放到堆里，每次取出优先级最高那个，并计算出它的父亲所在联通块在前并且它所在联通块在后两个联通块直接的贡献，并与它的父亲合并（并查集维护）。</li>
</ul>
</li>
<li>询问满足某种通过最大、最小、和等或具有单调性的特殊值形成的区间个数&#x2F;最值时<ul>
<li>分治</li>
<li>单调栈+ds</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
